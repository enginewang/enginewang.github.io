[{"categories":"posts","content":"\u003cp\u003e第一次开博客应该是在大二的时候，也就是2018年，用的是Hexo。之后觉得配置太少，想要有发挥的空间，就用当时学的Django写了一个博客网站，再后来又改成了Go+Vue，作为一个前后端分离的单体应用，包含博客的完整的功能，还能有其他拓展。\u003c/p\u003e\n\u003cp\u003e这本来应该是博客的最终形态了，然而精力有限，不想折腾markdown渲染和其他各种功能，以及为一些前后端、运维、优化的问题所烦恼，再加上服务器成本也不少，还是希望能够纯粹的写作。\u003c/p\u003e\n\u003cp\u003e因此现在又回到了最初的起点，转回了静态网页，这次用Hugo搭建，主题用的是Meme，所谓是从简到繁，又从繁到简。\u003c/p\u003e\n\u003cp\u003e之前的博客内容会逐步迁移过来，由于静态网页发文章很方便，会增加更多的内容，敬请期待。\u003c/p\u003e\n","date":1640099320,"description":"","fuzzywordcount":400,"kind":"page","lang":"zh","lastmod":1640245713,"objectID":"e2aee69cf0508da721fcf1b13ccf2888","publishdate":1640099320,"relpermalink":"/posts/hello-world/","section":"posts","summary":"第一次开博客应该是在大二的时候，也就是2018年，用的是Hexo。之后觉得配置太少，想要有发挥的空间，就用当时学的Django写了一个博客网站，再后来又改成了G","tags":["hugo","site"],"title":"返璞归真，博客重新迁移到Hugo","url":"https://yichengme.site/posts/hello-world/","wordcount":307},{"categories":"posts","content":"\u003ch4 id=\"拜占庭将军问题\"\u003e拜占庭将军问题\u003c/h4\u003e\n\u003cp\u003e拜占庭将军问题是分布式领域最复杂的一个容错模型，较好地抽象了分布式系统面临的共识问题。\u003c/p\u003e\n\u003cp\u003e假如你是一位拜占庭的将军，需要与其他几个国家的军队做沟通，而信使可能会被杀，可能会被替换，可能某国军队会传递错误信息等等，抽象出来的问题就是，如何在可能有错误发生的情况下，让多个节点达成共识，保持一致。\u003c/p\u003e\n\u003cp\u003e拜占庭将军是最困难的一种情况，因为会存在恶意节点行为行为，在某些场景（比如数字货币区块链）只能使用拜占庭容错算法（Byzantine Fault Torerace，BFT），常见的拜占庭算法有口信消息型算法、签名消息型算法、PBFT算法、PoW算法等。\u003c/p\u003e\n\u003cp\u003e在计算机分布式系统中，最常使用的还是非拜占庭容错算法，也就是故障容错算法（Crash Fault Tolerance，CFT），解决的是分布式系统中存在故障，但不存在恶意节点的场景。常见的算法有Paxos算法、Raft算法、ZAB协议等，这些协议之后都会讲解。\u003c/p\u003e\n\u003cp\u003e不过对于恶性的情况，一般只在区块链中出现，算法有PBFT、PoW等。但是我并没有打算涉足区块链相关的研究，所以这些算法不在讨论范围之内。\u003c/p\u003e\n\u003ch4 id=\"共识算法的概念\"\u003e共识算法的概念\u003c/h4\u003e\n\u003cp\u003e共识算法就是用来达成一致性的方法。\u003c/p\u003e\n\u003cp\u003e需要满足三个条件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eTermination：保证算法最后可以做出决定，不能是无限循环的\u003c/li\u003e\n\u003cli\u003eValidity：最终决议一定来自于其中一个参与的节点\u003c/li\u003e\n\u003cli\u003eAgreement：算法完成时，所有节点一定会做出相同的决定\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eFLP定理：完美的共识算法不存在。在非同步的网络环境中，就算只应付一个节点故障，也没有一个共识算法能保证完全正确。\u003c/p\u003e\n\u003cp\u003e一般的共识算法分为两类：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSymmetric, no leader\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e所有的节点地位等同，client可以向每一个server发送请求\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eAsymmetric, leader based\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e任一时刻只会有一个leader，leader处理client的请求，其余server只接受leader的决策，client只可以向leader发送请求。\u003c/p\u003e\n\u003ch4 id=\"paxos算法\"\u003ePaxos算法\u003c/h4\u003e\n\u003cp\u003ePaxos算法是分布式共识算法的元老，目前最流行的分布式算法都是基于Paxos改进的，所以不得不提。\u003c/p\u003e\n\u003cp\u003e兰伯特Lamport提出的Paxos包含两个部分：\n一个是Basic Paxos，描述的是多个节点之间如何就一个value达成共识；\n一个是Multi-Paxos，描述的是执行多个Basic Paxos实例，为一系列value达成共识。\n这一节只说Basic Paxos，Multi-Paxos下一节\u003c/p\u003e\n\u003ch5 id=\"系统角色\"\u003e系统角色\u003c/h5\u003e\n\u003cp\u003e提议者（Proposers）：向系统里的其他节点提出v=C，希望大家达成共识。\u003c/p\u003e\n\u003cp\u003e接受者（Acceptors）：不发起proposal的节点，接受Proposers的提议。\u003c/p\u003e\n\u003cp\u003e学习者（Learner）：不参与投票的过程，被告知投票的结果，接受达成的共识存储保存数据。\u003c/p\u003e\n\u003ch5 id=\"算法流程\"\u003e算法流程\u003c/h5\u003e\n\u003cp\u003e分为两个流程：\u003c/p\u003e\n\u003cp\u003e第一步：准备阶段\u003c/p\u003e\n\u003cp\u003e在提出提案之前，先得到超过半数节点的回应，也就是有半数以上的节点愿意聆听这个Proposer。假设这次要发送的数据是v\u003c/p\u003e\n\u003cp\u003e具体的过程：Proposers向所有节点发送\u003ccode\u003ePrepare(n)\u003c/code\u003e，n包含了一些元信息，可以比较大小，Acceptors接收到后，与这一轮从其他Proposers里收到的最大的提议N比较。\u003c/p\u003e\n\u003cp\u003e准备阶段只需要发送n即可，不需要发送v。\u003c/p\u003e\n\u003cp\u003e如果$n\u0026lt;N$，也就是目前的这个提议的n比这一轮已有的最大的N还小，直接无视这个提议。\n否则，就认为当前提议更好，如果此时已经发送过了一个返回给之前最大的那个Proposer，就返回一个\u003ccode\u003eack(n, (nx, vx))\u003c/code\u003e，n是这一次的n，nx是之前最大的那个Proposer的n，vx之前最大的那个Proposer的x。如果之前没接受过其他提议，就发送\u003ccode\u003eack(n, (null, null))\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e第二步：接受阶段\u003c/p\u003e\n\u003cp\u003eProposers等待过半的Acceptors返回后，对\u003ccode\u003eack\u003c/code\u003e作出判断，如果里面有节点的\u003ccode\u003eack\u003c/code\u003e返回的nx、vx不为空，就主动放弃，找出里面最大nx的vx，再发送\u003ccode\u003eaccept(n,vx)\u003c/code\u003e给所有的Acceptors。\n如果都为空的话，就传送\u003ccode\u003eaccept(n,v)\u003c/code\u003e给所有的Acceptors。\u003c/p\u003e\n\u003cp\u003eAcceptors收到\u003ccode\u003eaccept(n,v)\u003c/code\u003e后，不过可能还会收到\u003ccode\u003eprepare(n)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003ePaxos论文描述：\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193486/paxos-8.png\" alt=\"paxos-8\"\u003e\u003c/p\u003e\n\u003cp\u003e一些容易想错的地方，进行声明：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这里的n并不是具体的int，只是为了简单描述算法，实际上这里的n是一种数据结构，但是相互之间可以被比较，并且对于每个节点而言，它们的n必然不相同。\n并不是说一个节点只能当Proposer、Acceptor、Learner中的一种，实际上，每个节点都同时具有这三种角色。\nBasic Paxos只是对一个值形成决议，并不是多个值。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"具体例子\"\u003e具体例子\u003c/h5\u003e\n\u003cp\u003e举一个具体的例子，两个客户端作为提议者，n分别为1和5，v分别为3和7，有三个接受者。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e准备阶段\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e提议者分别发送\u003ccode\u003ePrepare(n)\u003c/code\u003e给三个节点，假设说AB先接收到了客户端1的信息，C先接受到了客户端2的信息\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193484/paxos-1.jpg\" alt=\"paxos-1\"\u003e\u003c/p\u003e\n\u003cp\u003e由于接受者之前没有提案（也可以认为目前的n是无穷小），所以接受到第一个提案后都进行响应，返回\u003ccode\u003eack(n, (null, null))\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193485/paxos-2.jpg\" alt=\"paxos-2\"\u003e\u003c/p\u003e\n\u003cp\u003e之后AB接受到客户端2传来的\u003ccode\u003ePrepare(5)\u003c/code\u003e，5\u0026gt;1，所以会发送准备响应给2。C接受到客户端1传来的\u003ccode\u003ePrepare(1)\u003c/code\u003e，1\u0026lt;5，直接无视该请求\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193485/paxos-3.jpg\" alt=\"paxos-3\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e接受阶段\n由于1、2都收到了多于半数的准备返回响应，并且返回的响应包含的之前最大提案号为空，所以会发送分别接受请求\u003ccode\u003eaccpet(1, 3)\u003c/code\u003e和\u003ccode\u003eaccept(5, 7)\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193484/paxos-4.jpg\" alt=\"paxos-4\"\u003e\u003c/p\u003e\n\u003cp\u003e最后ABC接受到1的确认，由于之前承诺不再接受n小于5的，所以不会变。接受到5的确认后就修改为了5\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193485/paxos-5.jpg\" alt=\"paxos-5\"\u003e\u003c/p\u003e\n\u003cp\u003e假设另一个例子，在某个顺序AB是n=5,v=7，C是n=1,v=3。此时有一个请求[9, 6]，发送给ABC之后，准备阶段，由于9\u0026gt;5，ABC会接受，并返回\n\u003ccode\u003eack(n, (nx, nv))\u003c/code\u003e，具体是AB返回\u003ccode\u003eack(9, (5, 7))\u003c/code\u003e,C返回\u003ccode\u003eack(9, (1, 3))\u003c/code\u003e，那么客户端3由于接受到的返回不为空，就会判断之前最大的n，这里是5，对应的v是7，所以在接受阶段会发送\u003ccode\u003eaccpet(9, 7)\u003c/code\u003e给所有节点。\u003c/p\u003e\n\u003cp\u003e可以参考这个视频：https://www.youtube.com/watch?v=UUQ8xYWR4do\u003c/p\u003e\n\u003ch4 id=\"multi-paxos\"\u003eMulti-Paxos\u003c/h4\u003e\n\u003cp\u003eMulti-Paxos并不是一个具体的算法，而是一种思想。指的是基于Mulit-Paxos算法通过多个Basic Paxos实例实现一系列值的共识的算法。（比如Raft算法、ZAB协议等）\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193485/paxos-6.jpg\" alt=\"paxos-6\"\u003e\u003c/p\u003e\n\u003cp\u003e由于第一阶段收到大多数准备响应的提议者才能发起第二阶段，那么如果多个提议者同时提交提案，可能因为永远无法收到超过半数的准备响应而阻塞。（比如系统中有5个节点，有3个同时发起提案）。\n另一个问题是两轮的RPC太消耗性能，也增加了延迟。\u003c/p\u003e\n\u003cp\u003e通过引入Leader（领导者）角色以及优化Basic Paxos来解决这两个问题。\nLeader节点作为唯一的提议者，这样就不存在提议冲突的情况。\nLeader的提案永远是最新的，所以省略掉准备阶段，直接开始接受阶段：\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193485/paxos-7.jpg\" alt=\"paxos-7\"\u003e\u003c/p\u003e\n\u003ch5 id=\"chubby的multi-paxos实现\"\u003eChubby的Multi-Paxos实现\u003c/h5\u003e\n\u003cp\u003eChubby实现了闭源的Multi-Paxos，通过引入Leader节点。Leader是通过执行Basic Paxos投票产生的。\n运行过程中会通过续租的方式延长租期，如果Leader故障，其他节点会选举出新的Leader。\n所有的读和写操作也只能在Leader上进行：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e写请求，Leader收到客户端的写请求，作为唯一的Proposer执行Basic Paxos将数据发给所有的节点来达成一致，半数以上的服务器接受了写请求之后，响应给客户端成功\u003c/li\u003e\n\u003cli\u003e读请求，很简单，Leader直接查询本地数据返回给客户端即可。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eChubby的ulti-Paxos实现的一些点：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLeader本地的数据一定是最新的。\u003c/li\u003e\n\u003cli\u003e可以容忍$\\frac{n-1}{2}$个节点的故障\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"raft\"\u003eRaft\u003c/h4\u003e\n\u003cp\u003eRaft算法在Multi-Paxos的思想上进行了简化和限制，是最常用的一个共识算法，也是目前分布式系统的首选共识算法。包括Etcd、Consul等。\u003c/p\u003e\n\u003cp\u003e本质上来说，Raft算法是通过一切以领导者为准的方式，实现一系列值的共识和各节点的日志一致。\u003c/p\u003e\n\u003cp\u003e强烈推荐看一下这个可视化的Raft，可以加深理解：http://thesecretlivesofdata.com/raft/\u003c/p\u003e\n\u003ch5 id=\"leader选举\"\u003eLeader选举\u003c/h5\u003e\n\u003cp\u003e服务器节点的状态分为三种：Leader（领导者）、Follower（追随者）、Candidate（候选人），其中Leader有且只有一个。\u003c/p\u003e\n\u003cp\u003eLeader：系统的核心角色，负责处理写请求、管理日志复制和不断与其他节点维持心跳，告知节点Leader存活，不要选举\nFollower：普通群众，接受和处理来自Leader的消息，如果Leader心跳超时就主动站出来变成Candidate\nCandidate：候选人，向其他节点发送RequestVote的RPC消息，通知其他节点投票，一旦获得了多数投票就晋升为Leader\u003c/p\u003e\n\u003cp\u003eRaft算法实现了随机超时时间，每个节点等待Leader的心跳超时时间随机。\u003c/p\u003e\n\u003cp\u003e初始时没有Leader，都是Follower，所有节点听不到Leader心跳，超时时间最小的节点首先称为候选者。\n它会增加自己的任期编号，给自己先投一票，然后发送RPC请求其他节点投票。\n其他节点收到RPC投票消息之后，如果还没有称为候选者，也还没投票的话，就会去投一票，同时增加自己的任期编号。\n如果在选举超时时间内获得了大多数的选票，就晋升为Leader。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关于RPC\nRaft算法总共有两类RPC，一个是请求投票RequestVote，一个是日志复制AppendEntries\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关于timeout\n每个节点的等待时间有两种：\n① 一个是election timeout，也就是从上一次Leader心跳开始算，如果过了这个timeout还没听到心跳，就自己称为Candidate，这个timeout一般是150-300ms\n② heartbeat timeout\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e关于任期\n任期由单调递增的数字（任期编号）标识\n何时加1？Follow发现Leader心跳超时，将自己任期+1，并发RPC\n何时更新？\n① 跟随者接受到包含任期的RPC请求后，发现任期比自己的大，就更新自己的任期为更大的任期。\n② Leader或者Candidate发现自己的任期编号比其他节点小，会立即降为Follower\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e如果一个节点收到一个包含任期编号比自己小的RPC请求，会直接无视。\n任期编号相同时，日志完整性高的Follow会拒绝投票给日志完整性低的Candidate\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e做法就是RequestVote RPC也会包含Candidate自己最后一个log entry的index和term，如果收到RequestRPC的节点发现这个Candidate最后一个log的term小于自己的term，或者term相等的时候index小于自己的index，那么就不会投票给它。这一策略保证了Leader一定拥有最完整的log entries\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e可能会出现多个Candidate同时发起投票请求，这样的话瓜分选票会导致无法选出半数以上的票，不过Raft通过随机超时时间解决了这一问题，把超时时间都进行了分散。这里的超时时间有两种，一个是Follower和Leader维持的心跳超时，一个是等待选举超时的时间间隔。\u003c/p\u003e\n\u003cp\u003e当然还有可能出现的极限情况，比如说刚好两个Candidate各拿到了一半的票，那么陷入阻塞，此时这两个Candidate还会有随机timeout，如果时间过了就重新发送RequestVote\u003c/p\u003e\n\u003cp\u003e几个注意的点：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e只有日志最完整的节点才能当Leader，Raft中，日志必须是连续的\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"日志复制\"\u003e日志复制\u003c/h5\u003e\n\u003cp\u003e日志项包含指令、索引值、任期编号等。\u003c/p\u003e\n\u003cp\u003e第一阶段，Leader通过日志复制AppendEntries，将日志项复制到集群的其他节点上，如果收到了大多数的“复制成功”消息，就把提交这条日志，并返回成功给客户端，否则会返回错误给客户端。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一开始只是保存日志到本地，比如客户端提交一条\u003ccode\u003eSET x = 5\u003c/code\u003e，Leader会先把这条写在日志里，不会修改x的值，等到多数节点返回成功之后才会执行这条指令，把x设为5。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAppendEntries RPC在每个heartbeat都会发送\u003c/p\u003e\n\u003cp\u003eLeader不需要发送消息来告知其他节点提交日志项，Leader的日志复制RPC和心跳包含了当前最大的将被提交的日志项。从而将二阶段简化为一阶段。\u003c/p\u003e\n\u003cp\u003e具体的过程为：\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193609/raft-1.jpg\" alt=\"raft-1\"\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e客户端提交一条写请求\u003c/li\u003e\n\u003cli\u003eLeader将其存在本地日志上，然后给各个Followers发送日志复制AppendEntries RPC，\u003c/li\u003e\n\u003cli\u003e如果有多数的Follower返回成功，Leader就将日志进行提交\u003c/li\u003e\n\u003cli\u003eLeader将执行的结果返回给客户端\u003c/li\u003e\n\u003cli\u003e之后如果Follower收到新的日志复制RPC或心跳，发现自己有日志项没提交，就进行提交\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e日志一致性的保证：\nLeader的日志必然是完整的，以Leader的日志为准来协调各个节点的日志。\u003c/p\u003e\n\u003cp\u003e首先通过AppendEntries RPC的一致性检查来找到自己与Follower相同日志项的最大索引值，之前的日志Follower和Leader一致，之后的就不一致了，然后Leader强制Follower覆盖不一致日志。\u003c/p\u003e\n\u003cp\u003e引入两个变量：\nPrevLogEntry：当前要复制的日志项的前一项的索引值，下面例子中为7\nPrevLogTerm：当前要复制的日志项的前一项的任期编号，下面例子中为4\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193609/raft-2.jpg\" alt=\"raft-2\"\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLeader发送AppendEntries RPC，包含当前任期编号4、PrevLogEntry=7、PrevLogTerm=4，\u003c/li\u003e\n\u003cli\u003eFollower发现自己的索引中没有这一条，返回Failure\u003c/li\u003e\n\u003cli\u003eLeader递减要复制的日志项的索引，发送PrevLogEntry=6、PrevLogTerm=3\u003c/li\u003e\n\u003cli\u003eFollower能在本地日志找到这一项，返回Success\u003c/li\u003e\n\u003cli\u003eLeader知道了自己与该Follower的相同日志的最大索引，复制并更新覆盖索引值之后的日志项。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cblockquote\u003e\n\u003cp\u003e为什么要上一条？因为这一条的话刚写，必然不一样，如果Follower一直和Leader一致，Follower是有Leader的上一条的，但是必然没有Leader新的一条，所以Leader如果从最新的一条发RPC，每一个节点都必然返回Failure，然后递减，非常浪费RPC。\n由于大部分节点是能同步日志的，所以第一次都会返回Success，然后Leader把新的一条复制过去即可，对于第一次Failure的个别节点，才会递减找到相同的最大索引值。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch5 id=\"成员变更\"\u003e成员变更\u003c/h5\u003e\n\u003cp\u003e在成员进行变更的时候，如何避免出现大于一个的Leader？\n比如出现了分区，节点被分为了多个簇，簇与簇之间无法沟通，那么每个簇内都会有一个Leader。\u003c/p\u003e\n\u003cp\u003e如果只是为了解决不出现多个Leader的情况，最暴力的方式就是节点全部关闭然后再重新启动，这样投票只会有一个Leader，但是这段时间系统会瘫痪，明显不合理。\n最常用的方法是单节点变更，也就是每次只变更一个节点。\u003c/p\u003e\n\u003cp\u003e比如当前集群配置为[A, B, C]，现在往里面加入[D, E]，一个一个加，先加D进去：\n首先Leader向D同步所有数据，然后Leader更新自己的配置为[A,B,C,D]，将包含新配置的日志项提交到本地状态机，完成单节点变更，之后E加入也一样。\n通过单节点变更，可以保证系统只有一个Leader。\u003c/p\u003e\n\u003cp\u003e可以看一下Raft作者讲的：\n\u003ca href=\"https://www.youtube.com/watch?v=vYp4LYbnnW8\"\u003ehttps://www.youtube.com/watch?v=vYp4LYbnnW8\u003c/a\u003e\u003c/p\u003e\n\u003ch4 id=\"总结\"\u003e总结\u003c/h4\u003e\n\u003cp\u003e以这张图进行总结：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193631/%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95-1.png\" alt=\"共识算法-1\"\u003e\u003c/p\u003e\n\u003cp\u003e对于上述共识算法进行比较：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eBackup，简单备份\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e比如mac的time machine。\n首先对于Consistency一致性，是无法保证的，一旦改变当前的文件，备份的旧版本和目前的会不一致。\nTransaction事务也只能是weak。\nLatency（时延）低、Throuput（吞吐量）高，因为读写的时候不需要运行协议，直接读取即可。\nData loss，如果没备份完，系统失效了，那最新的资料会遗失。\nFailover 故障恢复，系统恢复的这段时间系统是不能工作的。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eMaster/Salve 主从模式\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e读写请求都在master上进行，master将更新 的数据写到slave上。类似Dropbox。\u003c/p\u003e\n\u003cp\u003eConsistency：可以实现最终一致性\nTransactions：Master支持完整事务\nLatency、Throuput：读写的时候都直接在master上完成，所以低时延、高吞吐。\nData loss：可能造成数据丢失\nFailover：恢复的时候slave还是可以提供read\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003eMaster/Master\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLeaderless模式，每一个节点都可以接受读写请求。比如DynamoDB。\u003c/p\u003e\n\u003cp\u003eConsistency：可以实现最终一致性\nTransactions：只能本地支持\nLatency、Throuput：低时延、高吞吐。\nData loss：可能造成数据丢失\nFailover：仍能正常运作\u003c/p\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e2PC\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e二阶段模式\u003c/p\u003e\n\u003cp\u003eConsistency：强一致性\nTransactions：支持完整事务\nLatency、Throuput：因为每次都需要两阶段，比较差\nData loss：只要写入后资料达成一致就不会丢失\nFailover：仍能正常运作\u003c/p\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003ePaxos \u0026amp; Raft\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e虽然表中没有raft，实际上raft和paxos也差不多。\nPaxos可以认为是优化2PC之后的最优解。\u003c/p\u003e\n\u003cp\u003eConsistency：强一致性\nTransactions：支持完整事务\nLatency、Throuput：需要半数达成一致，相对差一点\nDataloss：只要写入后资料达成一致就不会丢失\nFailover：只要有半数的节点存活就可以正常运行。\u003c/p\u003e\n\u003cp\u003e参考：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"https://ithelp.ithome.com.tw/users/20121042/ironman/2792\"\u003ehttps://ithelp.ithome.com.tw/users/20121042/ironman/2792\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://time.geekbang.org/column/intro/100046101\"\u003ehttps://time.geekbang.org/column/intro/100046101\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n","date":1639927098,"description":"","fuzzywordcount":7000,"kind":"page","lang":"zh","lastmod":1640265233,"objectID":"023f69570d961b1f2974b0bcefc4b0e2","publishdate":1639927098,"relpermalink":"/posts/distribution-system-2/","section":"posts","summary":"拜占庭将军问题 拜占庭将军问题是分布式领域最复杂的一个容错模型，较好地抽象了分布式系统面临的共识问题。 假如你是一位拜占庭的将军，需要与其他几个国家的军队做沟通，而","tags":["分布式","精选"],"title":"分布式系统（二）：共识算法","url":"https://yichengme.site/posts/distribution-system-2/","wordcount":6938},{"categories":"posts","content":"\u003ch4 id=\"acidbase2pc3pc\"\u003eACID、BASE、2PC/3PC\u003c/h4\u003e\n\u003ch5 id=\"acid\"\u003eACID\u003c/h5\u003e\n\u003cp\u003e在讲ACID之前，先讲本地事务，事务最早在数据库等课程中就接触过，简单来说，事务提供一种“要么什么也不做，要么全做完”的机制。\u003c/p\u003e\n\u003cp\u003eACID特性是数据库事务的基本特征，包括：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eAtomicity 原子性\u003c/li\u003e\n\u003cli\u003eConsistency 一致性\u003c/li\u003e\n\u003cli\u003eIsolation 隔离性\u003c/li\u003e\n\u003cli\u003eDurability 持久性\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e合称就是ACID（在英语中正好是酸的意思，之后的BASE碱也与之对应）\u003c/p\u003e\n\u003cp\u003e然而分布式事务和本地事务不同，假设有一个操作需要多个机器上执行，要么都执行，要么都不执行。\n要保持分布式事务的ACID，方法有二阶段提交协议和TCC。\u003c/p\u003e\n\u003ch5 id=\"2pc二阶段提交协议\"\u003e2PC二阶段提交协议\u003c/h5\u003e\n\u003cp\u003e一个事务跨越多个节点，成为分布式事务，为了保持ACID，需要引入一个协调者的角色来统一掌控所有节点的结果。\u003c/p\u003e\n\u003cp\u003e整个过程被分为两个阶段：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e准备阶段（投票）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e协调者给每个参与者发送Prepare信息，每个参与者有两种选择：\n①返回失败\n②本地执行事务返回成功，但不提交。询问之后的所有事务操作都记log，以便之后的恢复。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e提交阶段（执行）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e如果协调者收到了失败或者超时，就直接给每个参与者发送回滚消息，否则就发送提交（commit）消息。\n参与者如果收到提交消息，就提交事务，并释放资源和锁。如果收到回滚消息，就回滚事务，并释放资源和锁。\u003c/p\u003e\n\u003cp\u003e二阶段提交协议的缺点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e同步阻塞，从投票开始到提交完成的这段时间，所用的资源被锁死\u003c/li\u003e\n\u003cli\u003e单点故障，如果协调者故障了，就会一直阻塞\u003c/li\u003e\n\u003cli\u003e数据不一致，第二阶段发送commit时可能部分节点因为故障收不到，导致只有一部分执行了commit。\n等\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e之后有提出三阶段协议3PC，对二阶段协议进行了改进，然而由于增加了通信成本，实际用的并不多，就不细讲。\u003c/p\u003e\n\u003ch5 id=\"tcctry-confirm-cancel\"\u003eTCC（Try-Confirm-Cancel）\u003c/h5\u003e\n\u003cp\u003eTCC是一个业务层面的协议，需要在业务代码中编写，包含了预留、确认或撤销三个阶段。\n核心思想是针对每个操作都要注册一个对其对应的确认操作和补偿操作。\n首先是try阶段，先通知各个节点的将要进行的操作。\n如果try阶段的回复都是ok，就执行确认操作，通知各个节点要执行操作；如果try阶段有错误或者超时，就执行撤销操作，\u003c/p\u003e\n\u003cp\u003e可以说ACID是CAP一致性的边界，也就是最强的一致性。\u003c/p\u003e\n\u003ch5 id=\"base\"\u003eBASE\u003c/h5\u003e\n\u003cp\u003eBASE则是追求可用性，是CAP中AP的拓展。\u003c/p\u003e\n\u003cp\u003eBASE的核心是基本可用（Basically Available）和最终一致性（Eventually Consistent）\u003c/p\u003e\n\u003cp\u003e比如遇到峰值，可以用四板斧解决：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e流量削峰，将访问请求错开，比如多个秒杀商品放在不同的时间开始\u003c/li\u003e\n\u003cli\u003e延迟请求，比如买火车票抢票的时候等一段时间系统才处理\u003c/li\u003e\n\u003cli\u003e体验降级，比如先用小图片代替原始图片\u003c/li\u003e\n\u003cli\u003e过载保护，请求放入队列中排队处理，超时了就直接拒绝，队列满了之后就清除一定的请求。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e目的是在基本可用性上保持妥协，谁也不想牺牲这些服务，但是为了可用性必须这样。\u003c/p\u003e\n\u003cp\u003e最终一致性是指所有数据副本在经过一段时间的同步之后，最终能保持一致性。\n显示生活中，除了金融等对一致性要求极高的领域，它们会使用强一致性。绝大部分互联网系统都采用最终一致性。\u003c/p\u003e\n\u003cp\u003e实现最终一致性的方式用的多的有以下几种：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e读时修复，查询数据的时候如果检测到不同的数据，系统自动修复\u003c/li\u003e\n\u003cli\u003e写时修复，写失败的时候先将数据缓存下来，之后定时重传\u003c/li\u003e\n\u003cli\u003e异步修复，最常用，通过定时对账来检测副本数据的一致性并修复\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e然而异步修复和读时修复的开销比较大，需要进行一致性对比，而写时修复的开销低。\u003c/p\u003e\n\u003cp\u003e如果要设计分布式数据库的一致性的时候，可以采用自定义写一致级别（All、Quorum、One、All）来让用户自主选择业务所适合的一致性级别\u003c/p\u003e\n\u003cp\u003eBASE通过牺牲强一致性来获得高可用性。\u003c/p\u003e\n\u003ch4 id=\"cap\"\u003eCAP\u003c/h4\u003e\n\u003cp\u003e分布式系统的最大难点之一就是维护各个节点之间的数据状态一致性。\n需要通过数据库或者分布式缓存来维护数据的一致性。\u003c/p\u003e\n\u003cp\u003eCAP是三个缩写的组合：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eC（Consistency）：数据一致性，分布式系统中，同一份数据可能存在于多个实例中，其中一份的修改必须同步到所有它的备份中。也就是说每一次必然能读到最新写入的数据，或者返回错误。\u003c/li\u003e\n\u003cli\u003eA（Availability）：服务可用性，服务在接收到客户端请求时必须要给出响应。在高并发和部分结点宕机的情况下依然可以响应。也就是每一次必然会返回结果，但是不保证是最新的正确的。\u003c/li\u003e\n\u003cli\u003eP（Partition tolerance）：分区容忍性，由于网络的不可靠性，位于不同网络分区的结点可能会通信失败，如果能容忍这种情况，那么就满足分区容忍性。也就是说出现问题能够容忍。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e一个分布式系统不可能同时满足这三个基本需求，最多只能满足两项。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e满足CA\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e也就是必然一致而且能够返回正确结果，这样是不存在的，其实就是单Server，不叫分布式系统。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e满足CP\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e牺牲A，只要系统中有一个Server没更新完，就返回错误，否则就返回正确的最新的值。\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e满足AP\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e牺牲C，也就是只要Server接收到请求就返回目前的值，但是不能保证一定是最新的正确的值。\u003c/p\u003e\n\u003cp\u003e分布式系统必须满足分区容忍性，也就是只能从A和P中进行取舍，数据一致性和服务可用性只能满足一个。当然实际情况不可能只顾一个而完全放弃另一个，而是在主要关心一个的前提下尽量满足另一个。\u003c/p\u003e\n\u003cp\u003e比较成熟的服务注册与发现有以下几个：Consul、Etcd、Zookeeper、Eureka\u003c/p\u003e\n\u003cp\u003e其中Consul、Etcd、Zookeeper满足了CP，而Eureka满足了AP。\u003c/p\u003e\n\u003ch4 id=\"一致化模型consistency-model\"\u003e一致化模型Consistency Model\u003c/h4\u003e\n\u003cp\u003e对Consistency的不同程度的要求也衍生出了多种不同的等级模型。根据不同的情况采取不同的模型。\u003c/p\u003e\n\u003cp\u003e假设有一场球赛，记分员负责将分数写入主Server，然后会将操作复制到各个replica server，读取分数的话可能是任意一个server。\u003c/p\u003e\n\u003cp\u003ek=0,1分别代表主队和客队，如果主队得了一分，记分员操作是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003ev = get(k)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eset(k, v+1)\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640193245/cap-2.png\" alt=\"cap-2\"\u003e\u003c/p\u003e\n\u003cp\u003e假设目前比分是2:5\u003c/p\u003e\n\u003ch5 id=\"strong-consistency\"\u003eStrong Consistency\u003c/h5\u003e\n\u003cp\u003e对于任何一个人，读到的一定是最新的\u003c/p\u003e\n\u003ch5 id=\"eventual-consistency\"\u003eEventual Consistency\u003c/h5\u003e\n\u003cp\u003e只把结果给其他Server，只能保证最后的时刻会更新到正确的最终值，但是之前读到任何小于结果的得分都有可能，甚至是完全没出现过的得分，比如2:0\u003c/p\u003e\n\u003ch5 id=\"consistent-prefix\"\u003eConsistent Prefix\u003c/h5\u003e\n\u003cp\u003e连同操作一起给其他Server，从而保证读到的一定是比赛中的某个比分，历史发生过。\u003c/p\u003e\n\u003ch5 id=\"bounded-staleness\"\u003eBounded Staleness\u003c/h5\u003e\n\u003cp\u003e保证读到的一定是t以内的结果。Bounded=0则为Strong Consistency。Bounded=无穷则为Eventual Consistency。\u003c/p\u003e\n\u003ch5 id=\"monotonic-reads\"\u003eMonotonic Reads\u003c/h5\u003e\n\u003cp\u003e可能返回任何结果，但是接下来会持续从同一个replica server中读取，保证每一次都至少会比之前的值新。\u003c/p\u003e\n\u003ch5 id=\"read-my-writes\"\u003eRead My Writes\u003c/h5\u003e\n\u003cp\u003e如果某个client对Server进行了set操作，那么之后的get必然是set的值。\u003c/p\u003e\n\u003cp\u003e不同的角色，要求的系统模型不一样。\n记分员：只有他会写入系统，用Read My Writes\n裁判：只能Strong Consistency\n报分员：保证是历史正确比分，然后每一次至少比上次新，Consistent Prefix+Monotonic Reads\n记者：Bounded Staleness就可以，多等点时间\n观众：无所谓，Eventual Consistency都行\u003c/p\u003e\n\u003cp\u003e银行的系统必然是Strong Consistency，只能最新。而DNS只要是Eventual Consistency就可以，因为需要快速返回结果，不是最新的也可以接受。\u003c/p\u003e\n\u003ch4 id=\"quorum-system\"\u003eQuorum System\u003c/h4\u003e\n\u003cp\u003eQuorum System随着Amazon与2007年发表的\u003ccode\u003eDynamo: Amazon’s Highly Available Key-value Store\u003c/code\u003e论文而提出，这篇论文是NoSQL的代表之作。DynamoDB是一个NoSQL数据库，支持键值和文档数据结构，具有Strongly Consistent和Eventually Consistent。\u003c/p\u003e\n\u003cp\u003e之前都是往一个Leader Server里写入，然后复制到replica server里，而我们更需要的是写入的时候任何一个Server都可以，读取的时候也是任何一个Server都可以。\n也就是Leaderless Replication\u003c/p\u003e\n\u003cp\u003e但是这样做的问题在于，如果两个写入操作的时间比较靠近，很可能出现对于不同的服务器而言，指令到达的时刻顺序不一致，从而错误。\u003c/p\u003e\n\u003cp\u003e一种方法是每次写入都加锁，也就是去抢每个replicas server的锁，直到都写完了才释放所有的锁，让下一个写入进入。但是这样的话过于严格，效率低下。\u003c/p\u003e\n\u003cp\u003e把条件放松一些。\n对于写入操作，当一个client取得w个replicas的Lock才被允许写入。\n取得R个replicas的Lock才被允许读。\n写入时搭配timestamp。\u003c/p\u003e\n\u003cp\u003e只要W+W\u0026gt;N就可以防止同时写的发生，保证不会出现最新的值不明确的情况。这个不解释。\u003c/p\u003e\n\u003cp\u003e只要W+R\u0026gt;N就可以防止同时读写的发生，保证不会出现读取的值不是最新值的情况。配合timestamp之后，根据抽屉理论，读的时候至少会读到一台最新的server，从而根据timestamp可以找出它。\u003c/p\u003e\n\u003cp\u003e通过Quorum System，可以不必设置primary server、replica server的形式，直接对任一server进行读写，仍然能保证Strong Consistency。\u003c/p\u003e\n\u003cp\u003e这样的话，通过使用DynamoDB，Amazon会在世界各个地方的数据中心存放你的数据，进行备份，也能通过local replica进行加速。\u003c/p\u003e\n\u003ch5 id=\"read-repair和anti-entropy\"\u003eRead-Repair和Anti-Entropy\u003c/h5\u003e\n\u003cp\u003e如果说有几个节点瘫痪了，导致每个都无法拿到超过一半的锁。\u003c/p\u003e\n\u003cp\u003eRead-Repair就是在读取的时候不仅通过timestamp拿到最新的结果，还顺便将最新的结果写回其他的server里去。这种适用于频繁读取的情况。\u003c/p\u003e\n\u003cp\u003e另一个方法是Anti-Entropy，也就是单独创建一个process，通过检查replica的版本并将所有server都同步成最新的。适用于读取不频繁的情况。\u003c/p\u003e\n\u003ch5 id=\"hinted-handoff\"\u003eHinted Handoff\u003c/h5\u003e\n\u003cp\u003e故障的server恢复之后，系统会写回这个server，这种做法叫Hinted Handoff。\n写失败的请求会缓存到本地硬盘上，并周期性的尝试重传。\u003c/p\u003e\n\u003ch5 id=\"quorum-nwr\"\u003eQuorum NWR\u003c/h5\u003e\n\u003cp\u003e对于AP系统，可以保证最终一致性但是无法保证强一致性。如果想满足强一致性，可以借助Quorum NWR。\u003c/p\u003e\n\u003cp\u003eQuorum NWR可以根据业务的特点，调整一致性级别。\u003c/p\u003e\n\u003cp\u003e三个要素：N、W、R\u003c/p\u003e\n\u003cp\u003eN：复制因子，也就是一个集群中，数据有多少个副本，当然不同的数据可能有不同的副本数\nW：写一致性级别，成功完成W个副本更新，才完成写操作\nR：读一致性级别，读一个数据对象需要读R个副本\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eW + R \u0026gt; N：不会出现并行读写，一定能读到最新值\u003c/strong\u003e\nW + W \u0026gt; N：不会出现并行写\nW + W \u0026lt;= N：可能出现不一致\nW + R \u0026lt;= N：可能会读不到最新的值\nR + R \u0026gt; N：\u003c/p\u003e\n\u003ch4 id=\"分布式系统的时间\"\u003e分布式系统的时间\u003c/h4\u003e\n\u003cp\u003e通常会采用W+W\u0026lt;=N来尽量保证Availablity，这种情况下如何规避并行写导致的不一致呢。\u003c/p\u003e\n\u003cp\u003e一个方式就是要了解两个指令在发出时的先后顺序，而不是到达时的顺序，从而保证一致性。看起来通过发出信号时就附加timestamp可以解决问题，看起来每台机器的时间是一样的，然而实际上并不一定。\u003c/p\u003e\n\u003cp\u003e由于每台机器自身的时间并不一定准确，甚至可能会出现接受到信息的timestamp比机器当前时间还要晚的情况（收到来自“未来”的消息），这样就很离谱，明显不合理。\u003c/p\u003e\n\u003ch5 id=\"lamport-logical-clock\"\u003eLamport Logical Clock\u003c/h5\u003e\n\u003cp\u003e在消息里夹带一个timestamp，但是在传递的时候，每个结点接受到timestamp后，会比较自身时间与timestamp的大小，然后选择最大的那个置为新的timestamp，从而保证一定递增。收到的消息的timestamp比本身时间还大的话，就将自己的时间改为timestamp的时间。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e每个参与者最开始都保存一个timestamp=0\u003c/li\u003e\n\u003cli\u003e如果在本地发生，timestamp+1\u003c/li\u003e\n\u003cli\u003e如果传递这个消息，timestamp+1，然后传递时附带该timestamp\u003c/li\u003e\n\u003cli\u003e如果接受这个消息，timestamp = Max(本地Clock, 消息timestamp) + 1\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e（Lamport发明了Latex）\u003c/p\u003e\n\u003ch5 id=\"vector-clock\"\u003eVector Clock\u003c/h5\u003e\n\u003cp\u003eLamport timestamp会显示两个先后的事件有因果关系，但是实际逻辑上并不一定，可能只是同时平行发生。\u003c/p\u003e\n\u003cp\u003e对于N个Node的系统，Vector Clock让每个Node都存储一个长度为N的timestamp vector\u003c/p\u003e\n\u003cp\u003e对于$Node_i$而言，存储$Vector_i = {t_0, t_1, ..., t_n}$\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e初始化每个Node的vector中的每个元素都为0\u003c/li\u003e\n\u003cli\u003e$Node_i$发生一个事件，$V_i[t_i]+1$\u003c/li\u003e\n\u003cli\u003e$Node_i$发生一个发送事件，$V_i[t_i]+1$，并夹带这个vector\u003c/li\u003e\n\u003cli\u003e$Node_j$发生一个接受事件，$V_j[t_i] = V_i[t_i]$、$V_j[t_j] = Max(V_j[t_j],V_i[t_i]) + 1$\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e参考：https://ithelp.ithome.com.tw/users/20121042/ironman/2792\u003c/p\u003e\n","date":1637252478,"description":"","fuzzywordcount":5100,"kind":"page","lang":"zh","lastmod":1640265233,"objectID":"e4a584c44ee6571fb543fcf4416dda32","publishdate":1637252478,"relpermalink":"/posts/distribution-system-1/","section":"posts","summary":"ACID、BASE、2PC/3PC ACID 在讲ACID之前，先讲本地事务，事务最早在数据库等课程中就接触过，简单来说，事务提供一种“要么什么也不做，要么全做完”的机制","tags":["分布式"],"title":"分布式系统（一）：CAP及基础理论","url":"https://yichengme.site/posts/distribution-system-1/","wordcount":5025},{"categories":"posts","content":"\u003ch4 id=\"介绍\"\u003e介绍\u003c/h4\u003e\n\u003cp\u003e为什么需要Bigtable？\n需要一个集群支持海量的随机读写，需要支持到每秒百万级别的随机读写。在Bigtable没出之前，使用MySQL集群可以解决一些问题，然而一方面会放弃关系型数据库的很多特征，比如外键约束、跨行跨表的事务等。一方面在扩容的时候不得不翻倍扩容，非常浪费。缩减服务器也非常麻烦。另外，在每次故障恢复的时候也需要人工介入。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192906/bigtable-0.png\" alt=\"bigtable-0\"\u003e\u003c/p\u003e\n\u003cp\u003e希望的伸缩性是可以随机增加或者去掉人任何数量的服务器，并且进行这些操作时不会使服务暂停。\u003c/p\u003e\n\u003cp\u003eBigtable建立在GFS的架构之上，是一个管理结构化数据的分布式存储系统，可以拓展到非常大的规模，比如跨越数千服务器的PB级别的数据。\nGoogle已经将其用在了很多内部产品中，Bigtable为其提供了一套高性能的可灵活拓展的解决方案。\u003c/p\u003e\n\u003cp\u003e在很多方面，Bigtable像是数据库，但相比于以往的系统，Bigtable提供了不一样的接口。它不支持完整的关系型数据模型。可以使用任意字符的行列名对数据进行索引，Bigtable将数据都视为未解释的字符串。\u003c/p\u003e\n\u003cp\u003e当然Bigtable也有缺点，一个是放弃了关系模型，不支持SQL；一个是放弃了跨行的事务，只支持单行的事务模型。\u003c/p\u003e\n\u003cp\u003eBigtable的解决方法是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e将存储层搭建在GFS上，通过单Master调度多Tablets的形式，使得集群容易维护，伸缩性好\u003c/li\u003e\n\u003cli\u003e通过MenTable+SSTable的底层文件格式，解决高速随机读写的问题\u003c/li\u003e\n\u003cli\u003e通过Chubby分布式锁解决一致性的问题\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"数据模型\"\u003e数据模型\u003c/h4\u003e\n\u003cp\u003eBigtable是一个稀疏的、分布式的永久存储的多维排序map，这个map通过row key、column key和timestamp进行索引，每个值都是一个未解释的字符串。\u003c/p\u003e\n\u003cp\u003e(row: string, column: string, time: int64) -\u0026gt; string\u003c/p\u003e\n\u003cp\u003e下图是一个存储网页的table\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003erow是url的倒转，比如www.google.com会存为com.google.www，这样的目的是前面的www大家都一样，而且子域名就会主域名靠一起。\u003c/li\u003e\n\u003cli\u003e有多列，其中\u003ccode\u003econtents:\u003c/code\u003e列存储网页html内容。\u003ccode\u003eanchor:\u003c/code\u003e列存储指向这个页面的anchor文字，比如cnnsi.com和my.look.ca有指向www.cnn.com的anchor，就如下图所示存储。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192906/bigtable-1.png\" alt=\"bigtable-1\"\u003e\u003c/p\u003e\n\u003ch5 id=\"rows\"\u003eRows\u003c/h5\u003e\n\u003cp\u003e行key是表的主键，可以是任意字符串，最大为64kb，在单行的读写都是原子的。\n由于读写总是通过行键，这样的数据库也叫做KV数据库。\nBigtable按行key对数据进行排序，行范围动态分区，每个行的范围被称为tablet，是分布式和负载均衡的单位。\u003c/p\u003e\n\u003ch5 id=\"column-families-列族\"\u003eColumn Families 列族\u003c/h5\u003e\n\u003cp\u003e每一行的数据需要指定列族，每个列族下不需要指定列，每个数据都可以有自己的列，每一行的列可以不一样。这也就是为什么说Bigtable是稀疏的表：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192908/bigtable-2.png\" alt=\"bigtable-2\"\u003e\u003c/p\u003e\n\u003cp\u003e列key被分组到了一个集合里，被称为column families，每个column families里的应当是相同类型。必须先创建column families，才能使用列key存储数据。\n列key通过\u003ccode\u003efamily:qualifier\u003c/code\u003e命名。比如存储web的表可以用language当做family，另一种是可以用anchor来当做family，每个列key是一个anchor，qualifier是指向该url的网址，内容是链接文本。\n访问控制和硬盘内存的记录都是在列family层级下进行的。\n比如Bigtable的开源实现HBase，每一个列族的数据存在同一个HFile文件下。\u003c/p\u003e\n\u003ch5 id=\"timestamp\"\u003eTimestamp\u003c/h5\u003e\n\u003cp\u003eBigtable的每个单元格可以包含相同数据的多个版本，不同的版本通过时间戳进行索引。Bigtable的时间戳是64位的整数。不同版本以递减的形式存储，以便可以首先读取最新版本。\u003c/p\u003e\n\u003cp\u003e为了防止变得过于繁重，可以指定个数或过期时间，之前的版本被gc。\u003c/p\u003e\n\u003ch4 id=\"api\"\u003eAPI\u003c/h4\u003e\n\u003cp\u003eBigtable的API包括创建、删除表和列族，以及修改簇、表、列族元数据等。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan class=\"c1\"\u003e// Open the table\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eTable\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eOpenOrDie\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/bigtable/web/webtable\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// Write a new anchor and delete an old anchor\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eRowMutation\u003c/span\u003e \u003cspan class=\"nf\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;com.cnn.www\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;anchor:www.c-span.org\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;CNN\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eDelete\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;anchor:www.abc.com\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eOperation\u003c/span\u003e \u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eApply\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eop\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003er1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan class=\"n\"\u003eScanner\u003c/span\u003e \u003cspan class=\"nf\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eT\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eScanStream\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"n\"\u003estream\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eFetchColumnFamily\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;anchor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eSetReturnAllVersions\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLookup\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;com.cnn.www\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eDone\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eNext\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%s %s %lld %s\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"n\"\u003escanner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eRowName\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eColumnName\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eMicroTimestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\n  \u003cspan class=\"n\"\u003estream\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"构建块\"\u003e构建块\u003c/h4\u003e\n\u003cp\u003eBigtable使用GFS存储日志和数据文件，\u003ccode\u003eSSTable\u003c/code\u003e用于存储Bigtable数据，每个SSTable包含一个块序列（每个块64kb），并且SSTable可以被完全的映射到内存中，不需要接触磁盘就可以执行查找和扫描。\u003c/p\u003e\n\u003cp\u003eBigtable依赖于分布式锁Chubby，Chubby包含了5个副本，其中一个被选为master并提供request服务。我后面会专门再讲一下Chubby。\u003c/p\u003e\n\u003cp\u003eBigtable通过Chubby完成以下任务：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e确保每个时刻只有一个master\u003c/li\u003e\n\u003cli\u003e存储Bigtable数据的引导位置\u003c/li\u003e\n\u003cli\u003e存储Bigtable每个表的列族信息\u003c/li\u003e\n\u003cli\u003e存储访问控制列表ACL\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e如果Chubby不可用，那么Bigtable也将不可用\u003c/p\u003e\n\u003ch4 id=\"实现\"\u003e实现\u003c/h4\u003e\n\u003cp\u003eBigtable包含三个主要组件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e链接到每个客户端的库\u003c/li\u003e\n\u003cli\u003e一个master服务器\u003c/li\u003e\n\u003cli\u003e多个tablet服务器\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003etablet可以动态的增加删除。\u003c/p\u003e\n\u003cp\u003emaster的职责：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e负责将tablet分配给tablet服务器\u003c/li\u003e\n\u003cli\u003e检测tablet的添加和过期\u003c/li\u003e\n\u003cli\u003e平衡Tablet server之间的负载\u003c/li\u003e\n\u003cli\u003e对GFS的文件进行gc\u003c/li\u003e\n\u003cli\u003e管理Table和列族的Schema变更\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e每个tablet服务器存储一组tablet（通常是10-1000个），\u003c/p\u003e\n\u003cp\u003eBigtable和Tablet Server都不进行数据的存储只负责在线业务，存储工作通过SSTable的数据格式写到GFS上。\u003c/p\u003e\n\u003ch5 id=\"tablet位置\"\u003eTablet位置\u003c/h5\u003e\n\u003cp\u003e通过B+树存储tablet的位置\u003c/p\u003e\n\u003cp\u003e定义了一张特殊的表Root tablet专门存放元数据，这个分区不会分裂，存的是元数据里其他Tablets的位置。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192904/bigtable-5.jpg\" alt=\"bigtable-5\"\u003e\u003c/p\u003e\n\u003cp\u003e第一级存储在Chubby的文件，包含root tablet的位置，root包含metadata tablets，包含了其他所有tablet的位置。tablet不做分割，确保不超过三层。\u003c/p\u003e\n\u003cp\u003e举个例子，客户端查询ECOMMERCE_ORDERS业务表行键是A20210101RST的某个记录，客户端查询的具体操作：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192906/bigtable-6.png\" alt=\"bigtable-6\"\u003e\u003c/p\u003e\n\u003cp\u003e也就是说在具体查找数据之前需要三次网络请求来获得数据的具体位置。一般前几次的查询也会缓存起来，以减少请求次数。\u003c/p\u003e\n\u003cp\u003e三层结构可以让Bigtable拓展到足够大，tablet大小限制为128MB，每条记录大约1KB，可以存$2^{34}$个Tablet，也就是160亿个Tablet。\u003c/p\u003e\n\u003cp\u003e客户端不需要经过master，让设计更加高可用\u003c/p\u003e\n\u003ch5 id=\"动态分区\"\u003e动态分区\u003c/h5\u003e\n\u003cp\u003eBigtable采用动态区间分区，通过自动去split的方式动态分区。\n好比是往箱子里放书，按照书名的字母顺序，一旦箱子装满，就中间一分为二，将下面一半放到一个新的空箱子里去。\n如果两个相邻的箱子都很空，就可以将其合并。\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192909/bigtable-4.png\" alt=\"bigtable-4\"\u003e\u003c/p\u003e\n\u003ch4 id=\"sstable底层结构\"\u003eSSTable底层结构\u003c/h4\u003e\n\u003cp\u003eBigtable的写入数据的过程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003etablet server先做数据验证，以及权限验证\u003c/li\u003e\n\u003cli\u003e如果合法，就以追加写的形式顺序写到GFS\u003c/li\u003e\n\u003cli\u003e写入成功后还会写到一张内存表MenTable中\u003c/li\u003e\n\u003cli\u003e写入的数据快要超过阈值时，会将内存的MemTable冻结，创建一个新的MemTable，被冻结的MemTable会被转换为SSTable写入到GFS，然后从内存中释放掉。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eMajor Compaction机制，对SSTable进行合并，把数据压实在一起，比如只留下时间戳最近的三个版本的数据。\n读取数据的时候，读取的是MemTable和SSTable的合并在一起的视图。\n也就是说并没有直接的修改和删除操作，一旦写入就是不可变的，写入的是数据的一个新版本，后台会定时gc，通过合并SSTable来清楚过期和被删除的数据。\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192906/bigtable-7.png\" alt=\"bigtable-7\"\u003e\u003c/p\u003e\n\u003ch4 id=\"总结\"\u003e总结\u003c/h4\u003e\n\u003cp\u003eBigtable包括四个组件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e负责存储数据的GFS\u003c/li\u003e\n\u003cli\u003e负责作为分布式锁和目录服务的Chubby\u003c/li\u003e\n\u003cli\u003e复杂提供在线服务的Tablet Server\u003c/li\u003e\n\u003cli\u003e复杂调度Tablet和调整负载的Master\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192908/bigtable-8.png\" alt=\"bigtable-8\"\u003e\u003c/p\u003e\n","date":1635265278,"description":"","fuzzywordcount":3200,"kind":"page","lang":"zh","lastmod":1640245693,"objectID":"534c672cce63a5648075561473d22efb","publishdate":1635265278,"relpermalink":"/posts/bigtable/","section":"posts","summary":"介绍 为什么需要Bigtable？ 需要一个集群支持海量的随机读写，需要支持到每秒百万级别的随机读写。在Bigtable没出之前，使用MySQL集群可以解决一些问题","tags":["Bigtable","分布式","大数据"],"title":"Google三驾马车（三）—— Bigtable","url":"https://yichengme.site/posts/bigtable/","wordcount":3123},{"categories":"posts","content":"\u003ch4 id=\"介绍\"\u003e介绍\u003c/h4\u003e\n\u003cp\u003eMapReduce是一个用于处理和生成大型数据集的编程模型和相关实现，它是一个分布式模型，通过一个Map函数将k/v对生存一组中间态的k/v对，然后通过一个reduce函数将所有的中间态k/v对进行聚合。\nMapReduce运行在一个大型的商用机器集群上，比如可以在数千台机器上处理大量TB级别的数据。\n实际上Google早已将其用于实际的任务，每天有超过1000个MapReduce任务在谷歌的集群上运行。\u003c/p\u003e\n\u003cp\u003e面对百亿级别的爬虫数据、日志文件等，常规方法不可能做到时效性，只能采用分布式系统进行并行计算。\u003c/p\u003e\n\u003ch4 id=\"编程模型\"\u003e编程模型\u003c/h4\u003e\n\u003cp\u003e输入是一系列k/v对的set，输出也是一系列k/v对的set\u003c/p\u003e\n\u003cp\u003e用户需要编写Map和Reduce这两个函数，其中Map函数通过输入pair来产生中间过程的k/v对\n接下来会将Key为I的中间值传递给对应处理Key I的Reduce函数\nReduce函数接受一系列的Key为I的值，然后merge在一起，每次只有0或1\n具体的见下面的例子。\u003c/p\u003e\n\u003ch5 id=\"例子\"\u003e例子\u003c/h5\u003e\n\u003cp\u003e输入文件首先分块，\n需要一个Map函数，每个输入文件输入Map进行处理，每个都是并行的，产生对应的输出，输出是一个list形式的Key/Value的键值对。\u003c/p\u003e\n\u003cp\u003e假设我们的功能是读取字符出现的次数。\n假设输入为\u0026quot;abbac\u0026quot;，被拆成了三个文件，总共也就这三个Key。分别是\u0026quot;ab\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;ac\u0026quot;，并行输入进Map，三个输出分别为：\n(a,1), (b,1)\n(b,1)\n(a,1), (c,1)\u003c/p\u003e\n\u003cp\u003e然后进行reduce操作，对于每个Key，会传入reduce函数进行汇总，去统计每个Key的出现个数。这也是并行的。\u003c/p\u003e\n\u003cp\u003e那么经过reduce操作之后，输出为：\n(a, 2)\n(b, 2)\n(c, 1)\u003c/p\u003e\n\u003cp\u003e完整的Job由一系列的MapTask和一系列的reduceTask组成。\u003c/p\u003e\n\u003cp\u003e下面来说说对于统计字母的功能下，Map和Reduce这两个函数的结构：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan class=\"c1\"\u003e// Map函数，k指明文件，v是文件内容\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003eMap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esplit\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e \u003cspan class=\"n\"\u003ewords\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003eeach\u003c/span\u003e \u003cspan class=\"n\"\u003eword\u003c/span\u003e \u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eemit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan class=\"c1\"\u003e// reduce函数，k是这个字母，v是包含这个字母的map数量\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eemit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eMapReduc和GFS都运行在一起，在并行进Map的时候，实际上避免了网络传输，中控通过某些方式能够知道该文件存在哪台主机里，然后在该主机调用Map本地操作，从而减少带宽传输限制。后面reduce只能通过网络。\u003c/p\u003e\n\u003cp\u003e最开始是按行存储，然后按列存储，这个过程叫Shuffle，从Map服务器到Reduce服务器，这一过程很消耗网络。\u003c/p\u003e\n\u003ch5 id=\"类型\"\u003e类型\u003c/h5\u003e\n\u003cp\u003e\u003ccode\u003emap\u003c/code\u003e函数 输入是\u003ccode\u003e(k1, v1)\u003c/code\u003e，输出是\u003ccode\u003elist(k2, v2)\u003c/code\u003e\n\u003ccode\u003ereduce\u003c/code\u003e函数 输入是\u003ccode\u003e(k2, list(v2))\u003c/code\u003e，输出是\u003ccode\u003elist(v2)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e以统计词频为例，这里map的输入是(filename, fileContent)，输出是对于每一个单词为key的k/v列表，比如[\u0026quot;Apple\u0026quot;: 1, \u0026quot;Banana\u0026quot;: 1,...]。\n这里reduce的输入就是一个单独单词的一系列值，比如\u003ccode\u003e\u0026quot;Apple\u0026quot;, [1, 1, 1,...]\u003c/code\u003e，然后输出是该单词的词频。\u003c/p\u003e\n\u003ch5 id=\"更多的例子\"\u003e更多的例子\u003c/h5\u003e\n\u003cp\u003e除此之外还有很多适用于MapReduce的很好的例子。\u003c/p\u003e\n\u003ch4 id=\"实现\"\u003e实现\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192780/mapreduce-1.png\" alt=\"mapreduce-1\"\u003e\u003c/p\u003e\n\u003cp\u003e分割输入数据，分成M个子集，被调用分布到多台机器上并行处理。之后分割中间key形成R个片（比如通过\u003ccode\u003ehash(key) mod R\u003c/code\u003e），reduce调用分布到各个机器上。\u003c/p\u003e\n\u003cp\u003e具体步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e分割输入文件为M个片，每个片的大小约16-64M\u003c/li\u003e\n\u003cli\u003e一个master，和多个worker，有M个map任务和R个reduce任务将被分配，管理者的一个任务是分配map或者reduce任务给一个空闲的worker\u003c/li\u003e\n\u003cli\u003e被分配了map任务的worker需要做的是读取输入片的内容，分析出k/v对，传递给用户自定义的map函数，产生的中间k/v对缓存在内存中。\u003c/li\u003e\n\u003cli\u003e缓存在内存中的k/v对通过分割函数写入R个区域，本地的缓存对的位置传送给master，然后master把这些位置传送给reduce worker。\u003c/li\u003e\n\u003cli\u003ereduce worker通过远程调用来从map worker的磁盘上读取缓存的内容，reduce worker通过排序使得具有相同key的内容聚集在一起。如果中间数据比内存还大，就需要外排序。\u003c/li\u003e\n\u003cli\u003ereduce worker迭代排过序的中间数据，对于每一个唯一的key，把key和相关的value传递给reduce函数，reduce函数的输出被添加到最终的输出文件中\u003c/li\u003e\n\u003cli\u003e所有的map和reduce都完成之后，管理者唤醒用户程序，用户程序的MapReduce调用返回到用户代码\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"master的数据结构\"\u003eMaster的数据结构\u003c/h5\u003e\n\u003cp\u003emaster首先会存储每个map任务和reduce任务的状态（空闲、进行中、完成）以及工作机器的标识。\nmaster还会存储由map产生的中间文件的区域和大小，然后传给reduce的worker\u003c/p\u003e\n\u003ch5 id=\"容错\"\u003e容错\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eworker故障\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003emaster会定期ping每个worker，如果一段时间内没有收到响应，master就会将该结点标记为failed。正在进行的map或者reduce更是会重设状态，被调给其他worker。\n然而，这些worker已经完成的map任务也会重新设置为idle状态，将会调度给其他的worker，这是因为它们的输出会存在故障机器的本地磁盘上，不过已经完成的reduce任务不需要重新运行，因为它们会存在全局文件系统上。\u003c/p\u003e\n\u003cp\u003e如果一个map任务在A worker上执行，然后A挂了，被调度给了B worker。所有的在做reduce的worker都会被通知到这个，然后读取对应的中间数据会从B读取。\u003c/p\u003e\n\u003cp\u003eMapReduce对大规模的worker故障有弹性。\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eMaster故障\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003emaster会定期将内部的数据结构写到checkpoints里，如果master挂了，可以很容易的从最后一个checkpoints开启一个新的副本。\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e失败时的Semantics\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e即使有故障，也能得到和没故障发生的情况下一样的输出。\u003c/p\u003e\n\u003cp\u003e依赖于map和reduce任务提交的原子性\u003c/p\u003e\n\u003ch5 id=\"本地\"\u003e本地\u003c/h5\u003e\n\u003cp\u003e带宽是一种相对稀缺的资源，通过GFS存储在cluster的本地磁盘上。大部分输入数据会在本地读取，不消耗网络带宽。\u003c/p\u003e\n\u003ch5 id=\"任务粒度\"\u003e任务粒度\u003c/h5\u003e\n\u003cp\u003emap任务被分为了M个片，reduce任务被分为了R个片，M和R实际上会远高于实际的worker机器，\u003c/p\u003e\n\u003cp\u003emaster将做$O(M+R)$的任务调度，以及保存$O(M*N)$个状态。\u003c/p\u003e\n\u003ch5 id=\"备份任务\"\u003e备份任务\u003c/h5\u003e\n\u003cp\u003e有时候可能会出现某个任务运行过久导致严重影响整体性能，比如某个worker机器的磁盘坏了导致非常慢的运行，它依然响应服务器的心跳不能认为是failed，但是运行就是非常慢。\nMapReduce有一个备份任务的机制，就是当MapReduce即将完成的时候，也就是大多数任务都做完了，那么就会去备份还没完成的任务，只要原始任务或者备份任务的其中一个做完了就可以。\u003c/p\u003e\n\u003ch4 id=\"改良拓展性能表现与实验\"\u003e改良拓展、性能表现与实验\u003c/h4\u003e\n\u003cp\u003e上述已经是一个基本的MapReduce的任务了，一些改进拓展、性能表现与实验就不详细说明了，日后可以研究。\u003c/p\u003e\n","date":1634559678,"description":"","fuzzywordcount":2900,"kind":"page","lang":"zh","lastmod":1640245665,"objectID":"96e10a22c2f40cfcca1a0543f2648669","publishdate":1634559678,"relpermalink":"/posts/mapreduce/","section":"posts","summary":"介绍 MapReduce是一个用于处理和生成大型数据集的编程模型和相关实现，它是一个分布式模型，通过一个Map函数将k/v对生存一组中间态的k/v对，然后通过一个","tags":["MapReduce","分布式","大数据"],"title":"Google三驾马车（二）—— MapReduce","url":"https://yichengme.site/posts/mapreduce/","wordcount":2801},{"categories":"posts","content":"\u003ch4 id=\"介绍\"\u003e介绍\u003c/h4\u003e\n\u003cp\u003eGFS，即Google File System，谷歌文件系统。\n它是一种能够用于大型密集型数据的可拓展的分布式文件系统。（大型存储系统），它对于廉价硬件提供了容错机制；对于大量客户的情况能有高表现。\u003c/p\u003e\n\u003cp\u003eGFS的设计是由实际的应用程序负载和技术环境驱动的，与传统的文件系统的一些假设不一样。\u003c/p\u003e\n\u003ch4 id=\"设计\"\u003e设计\u003c/h4\u003e\n\u003ch5 id=\"一些假设\"\u003e一些假设\u003c/h5\u003e\n\u003cul\u003e\n\u003cli\u003e软硬件故障是常态而不是例外\u003c/li\u003e\n\u003cli\u003e文件是巨大的（多GB级也是普遍的）\u003c/li\u003e\n\u003cli\u003e负载包括大的流式读取和小的随机读取\u003c/li\u003e\n\u003cli\u003e负载还包括大的顺序的append写入\u003c/li\u003e\n\u003cli\u003e大多数文件是通过append而不是overwrite来改变的，一旦写入，就只能读取，而且是顺序读\u003c/li\u003e\n\u003cli\u003e放宽了一致性，从而极大简化了文件系统\u003c/li\u003e\n\u003cli\u003e引入了原子的追加写，可以并发的追加\u003c/li\u003e\n\u003cli\u003e高的持续带宽比低延迟更重要\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一般用append，GFS对其一致性有保证，最好不用write\u003c/p\u003e\n\u003ch5 id=\"接口\"\u003e接口\u003c/h5\u003e\n\u003cp\u003e接口方面支持通用的create、delte、open、close、read、write。并且还有snapshot和append操作。\nsnapshot以低成本创建文件或者目录的副本，append允许多个客户端并发的追加同一个文件，保证原子性。\n对于实现多路合并以及生产者-消费者模型很有用。\u003c/p\u003e\n\u003ch5 id=\"架构\"\u003e架构\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192564/gfs-1.png\" alt=\"gfs-1\"\u003e\u003c/p\u003e\n\u003cp\u003e一个GFS集群由一个master结点和多个chunk sever构成，并被多个客户端访问。它们通常都是普通的Linux机器。\u003c/p\u003e\n\u003cp\u003eGFS把文件切割为若干固定长度的Chunk块并存储，每个块的大小是64MB，在创建块时，对于每一个Chunk，master还会为其分配一个64位的全局唯一的Handle句柄。为了保证Chunk的可用性，每个块都会被复制到多个chunk server上，默认存储三个副本。\u003c/p\u003e\n\u003cp\u003emaster维护所有文件系统的元数据，包括namespace、访问控制信息、从文件到chunk的映射、以及块的当前位置。它还控制系统范围内的活动，比如chunk的租约管理、孤立chunk的gc、chunk server之间的chunk迁移。master定期与chunkserver维持心跳通信，给chunkserver指令以及接受它们的状态。客户端和chunkserver都不需要缓存文件数据，从而简化系统，唯一可能要缓存的可能就是客户机会缓存一下元数据。\u003c/p\u003e\n\u003ch5 id=\"single-master\"\u003eSingle Master\u003c/h5\u003e\n\u003cp\u003e设立一个master可以极大的简化系统的设计，可以很方便地进行全局信息的管理。然而单一的master很容易成为系统的瓶颈，所以只能让其尽可能少的参与读写。客户端从来不从master中读写文件数据，而是向master询问它需要的文件在哪，然后访问这些chunkserver去进行文件交互。\u003c/p\u003e\n\u003cp\u003e下面解释一下交互过程，首先客户端借助固定的块大小，将文件名和偏移量转换为块索引，然后向master发送包含文件名和块索引的请求，master返回一个chunk句柄和副本的位置。接下来客户端会向其中一个（往往是最近的）存储着该文件副本的chunkserver发送请求，之后对同一个chunkserver的交互不需要master的参与。事实上客户端通常一次会请求多个块。\u003c/p\u003e\n\u003ch5 id=\"chunk-size\"\u003eChunk Size\u003c/h5\u003e\n\u003cp\u003e选择的是64MB，比典型文件系统的块大得多，相对于小的chunk size，更大的chunk size的优势在于：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e减少客户端请求的chunk数量，减少客户端与master的交互需求。\u003c/li\u003e\n\u003cli\u003e大的chunk可以让客户端执行很多操作，通过较长时间与chunkserver的持续的tcp连接来减少网络开销\u003c/li\u003e\n\u003cli\u003e减少了chunk的个数，从而减少了存储在master的元数据的大小\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当然，大的chunk size也有缺点：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e可能会出现更多客户端访问一个chunk从而导致这个chunk成为hot spots。一般来说还好，不过如果某个可执行文件被写入了某个chunk，然后在数百台机器上同时启动，那个chunkserver就很容易超载。一个解决方法是将可执行文件复制更多份，并使批队列系统错开启动时间。还有一个解决方法是允许客户机从其他客户机读取数据。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"metadata\"\u003eMetadata\u003c/h5\u003e\n\u003cp\u003e元数据包含文件和chunk的namespace、从文件到块的映射、以及每个chunk副本的位置，所有的元数据都存储在master的内存中。前面两个也通过日志的方式存储在本地磁盘中，实现持久性存储，顺带也复制在远程机器上备份。这个主要是保证即使master崩溃了也不会出现不一致。\n至于chunk副本的位置，master并不会持久地存储，而是在master启动的时候对每个chunkserver进行轮询，或者在新的chunkserver加入集群时询问。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e内存中的数据结构\n元数据存储在内存中，所以访问起来很快。\nmaster还会在后台周期性的扫描整个状态，用于实现gc、chunkserver故障时的重新复制、块迁移来平衡负载等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e可能会认为说元数据存在master内存中，整个系统的容量会受到master内存的限制，实际上chunk由于比较大，个数不会那么多，master也只需要存每个chunk的不到64字节的元数据，所以还好。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003echunk位置\n前面说了master通过启动时的轮询获得信息，并且还会保持一个心跳来监听各个chunkserver的状态。\n由于集群很大，如果在master上持久化在本地存储chunk副本位置，之后变动会很多（改名、宕机、重启等），并且实际上chunkserver才是对chunk有着最终决定权，在master上维护一个一致性的视图是没有意义的。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e操作日志\n操作日志包含了元数据发生重大变化的历史记录，是GFS的核心。它是元数据的唯一持久性记录，也作为定义并发操作顺序的逻辑时间线。操作日志需要被可靠地存储。\n如果系统崩了，master就会重新执行log来恢复GFS，所以log也不宜过大，以免启动时间过长。会先找到重载的checkpoint然后执行之后的日志记录。检查点是一种类似B树的紧凑形式，加快恢复速度。\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch5 id=\"一致性模型\"\u003e一致性模型\u003c/h5\u003e\n\u003cp\u003eGFS并不保持一个严格的一致性，而是保持一个相对宽松的一致性\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGFS保证的\n命名空间是原子的，保证操作日志是全局的顺序正确的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e数据更改之后的文件区域的状态：\u003c/p\u003e\n\u003cp\u003e文件数据更改之后，会定义一个region，其状态取决于变化的种类（write/append）、是否并行、成功还是失败。\u003c/p\u003e\n\u003cp\u003e如果它是一致的，客户端会看到变化写入的内容。\n如何区分已定义区域和未定义区域。\u003c/p\u003e\n\u003cp\u003e在一次成功的顺序变化后，GFS会：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在chunk的所有副本上以相同的顺序应用这些变化\u003c/li\u003e\n\u003cli\u003e使用chunk版本号来检测副本\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e应用程序应当append而不是write。\u003c/p\u003e\n\u003ch4 id=\"系统交互\"\u003e系统交互\u003c/h4\u003e\n\u003cp\u003e描述客户端、master、chunkserver如何进行交互，完成数据更改、原子追加和快照。\u003c/p\u003e\n\u003ch5 id=\"租约和数据更改顺序\"\u003e租约和数据更改顺序\u003c/h5\u003e\n\u003cp\u003e数据更改（mutations）就是改变chunk的内容或者元数据的操作，比如write或append。数据更改在chunk副本上执行。\n使用租约（leases）来维持副本之间的一致的变化顺序。master会将租约授权给其中一个副本，称之为该chunk的主服务器（primary）。主服务器会为这个chunk的所有更改进行顺序排序，其余的所有副本都遵守这个顺序进行更改。\n租约机制的目的也是减少master的管理开销，租约的初始时间是60s，不过主要chunk发生了改变，primary就可以向master请求拓展，这些请求被承载在心跳信息上。\u003c/p\u003e\n\u003cp\u003e下图是写操作的控制流与详细的步骤\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640192564/gfs-2.png\" alt=\"gfs-2\"\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e客户端询问master哪个chunkserver持有当前chunk的租约，以及其他副本的位置。如果没有服务器有租约，master就选择一个副本服务器分给它租约\u003c/li\u003e\n\u003cli\u003e服务器返回primary和副本chunkserver的位置，客户端把它们存在缓存中，如果未来短期内再次访问就不需要请求master。除非primary不可达或者primary告知客户端它没有租约了。\u003c/li\u003e\n\u003cli\u003e客户端知道副本位置后，将数据push进所有的副本中，可以按照任何顺序。每个chunkserver将数据存储在一个内部的LRU缓存中\u003c/li\u003e\n\u003cli\u003e一旦所有的副本都确认接受到了数据，客户端就向primary发送写请求，标识了之前push的数据，primary会分配序列号给这些mutations，提供必要的序列化\u003c/li\u003e\n\u003cli\u003eprimary将写请求转发给各个备用副本，每个备份副本按照序列号执行更改\u003c/li\u003e\n\u003cli\u003e备份副本回复primary表示已经完成了操作\u003c/li\u003e\n\u003cli\u003eprimary响应客户端，任何遇到的错误也会报告\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"数据流\"\u003e数据流\u003c/h5\u003e\n\u003cp\u003e数据流和控制流解耦，为了充分利用每台机器的带宽，数据被线性的沿着chunkserver链进行推送，而不是分布在拓扑网络中，这样每台机器的带宽就可以被充分利用，每台机器将数据转发到网络拓扑中“最近的”没有接收到它的机器。（感觉像Prim算法）\u003c/p\u003e\n\u003ch5 id=\"原子追加\"\u003e原子追加\u003c/h5\u003e\n\u003cp\u003eGFS提供了原子追加（atomic record appends）操作。\n传统的写操作需要提供数据和偏移量，如果出现并行的情况就很可能会出现来自多个客户端的碎片。\n在GFS中，客户端只提供数据，GFS会选择偏移量并将其返回给客户端，类似于Unix的\u003ccode\u003eO_APPEND\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e大量使用record append，如果是传统的写操作，为了保持一致性就只能使用分布式锁，代价很昂贵。\u003c/p\u003e\n\u003ch5 id=\"snapshot快照\"\u003eSnapshot快照\u003c/h5\u003e\n\u003cp\u003e类似AFS，使用标准的copy-on-write技术实现快照。\u003c/p\u003e\n\u003ch4 id=\"master操作\"\u003eMaster操作\u003c/h4\u003e\n\u003cp\u003emaster的任务：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e执行所有namespace相关的操作\u003c/li\u003e\n\u003cli\u003e管理系统的chunk副本以及与之相关的一些操作\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"namespace的管理和锁定\"\u003enamespace的管理和锁定\u003c/h5\u003e\n\u003cp\u003eGFS没有传统文件系统的per-directory数据结构。也不支持alias。\u003c/p\u003e\n\u003ch5 id=\"gc\"\u003egc\u003c/h5\u003e\n\u003cp\u003e文件被删除之后，不会立即回收资源，而是先重命名为包含删除时间戳的隐藏文件，如果隐藏文件存在超过三天，就删除它们。在此期间，这些文件可以被恢复。\n内存元数据也会被删除，切断和所有chunk的联系，在和master的心跳中，chunkserver报告自己的chunks，master会返回不出现在namespace里的，chunkserver接受到后可以删掉这些chunk。\u003c/p\u003e\n\u003ch4 id=\"容错性与诊断\"\u003e容错性与诊断\u003c/h4\u003e\n\u003ch5 id=\"高可用性\"\u003e高可用性\u003c/h5\u003e\n\u003cp\u003e通过两种简单而有效的策略来保持整个系统的高可用性:快速恢复和复制\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e快速恢复\nmaster和chunkserver都可以在几秒内启动\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003echunk复制\n默认是复制3份\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003emaster复制\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e操作日志和检查点被复制到多台机器上\u003c/p\u003e\n","date":1633946418,"description":"","fuzzywordcount":4200,"kind":"page","lang":"zh","lastmod":1640245675,"objectID":"dade7d7149f779fb475e99550c915f21","publishdate":1633946418,"relpermalink":"/posts/gfs/","section":"posts","summary":"介绍 GFS，即Google File System，谷歌文件系统。 它是一种能够用于大型密集型数据的可拓展的分布式文件系统。（大型存储系统），它对于廉价硬件提供了容错机制；","tags":["GFS","分布式","大数据"],"title":"Google三驾马车（一）—— Google File System","url":"https://yichengme.site/posts/gfs/","wordcount":4114},{"categories":"posts","content":"\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640248844/survival-analysis-0.png\" alt=\"survival-analysis-1\"\u003e\u003c/p\u003e\n\u003ch4 id=\"背景与简介\"\u003e背景与简介\u003c/h4\u003e\n\u003cp\u003e在生物医学、金融保险等领域，生存分析是一种很常见而且重要的方法。\u003c/p\u003e\n\u003cp\u003e生存分析主要用在癌症等疾病的研究中，比如对某种抗癌药物做临床试验，筛选一部分癌症患者，分为两组，一组服用该试验药物，一组服用对照药物，服药后开始统计每个患者从服药一直到死亡的生存时间。\u003c/p\u003e\n\u003cp\u003e生存分析可以抽象概述为，研究在不同条件下，特定事件发生与时间的关系是否存在差异。这些具体事件可以是死亡，也可以是痊愈、肿瘤转移、复发、出院、重新入院等任何可以明确识别的事件，而不同条件即为不同的分组依据，可以是年龄、性别、地域、某个基因表达量的高低、某个突变的携带与否等等。\u003c/p\u003e\n\u003cp\u003e（后面均用\u0026quot;死亡\u0026quot;来代指这个特定事件\u003c/p\u003e\n\u003ch4 id=\"概念与推导\"\u003e概念与推导\u003c/h4\u003e\n\u003ch5 id=\"生存时间t\"\u003e生存时间T\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640248843/surv-time-1.png\" alt=\"survival-time\"\u003e\u003c/p\u003e\n\u003cp\u003e把生存时间作为一个随机变量，用PDF（概率密度函数）和CDF（分布函数）来表达\u003c/p\u003e\n\u003cp\u003e其中CDF为$F(t) = Pr(T \u0026lt; t)$，也就是t之前死亡的概率\u003c/p\u003e\n\u003ch5 id=\"生存概率\"\u003e生存概率\u003c/h5\u003e\n\u003cp\u003eS(t)，Survival probability，研究对象从试验开始到某个特定时间点仍然存活的概率,$S(t) = pr(T \u0026gt; t)$\u003c/p\u003e\n\u003cp\u003e$S(t) = 1 - F(t)$\u003c/p\u003e\n\u003cp\u003e之后的Kaplan-Meier模型主要关注S(t)\u003c/p\u003e\n\u003ch5 id=\"风险概率\"\u003e风险概率\u003c/h5\u003e\n\u003cp\u003e$h(t): \\text{Hazard function}$\u003c/p\u003e\n\u003cp\u003e$$h(t) = \\lim_{\\epsilon \\to 0}\\frac{P(T \\in (t, t+\\epsilon] | T \\geqslant t)}{\\epsilon} = \\frac{f(t)}{S(t)}$$\u003c/p\u003e\n\u003cp\u003e前一个等号的意义 很明显，表示的意义就是研究对象从试验开始到某个特定时间点t之前存活，但是在t时间点发生\u0026quot;死亡\u0026quot;的概率\u003c/p\u003e\n\u003cp\u003e后面一个等号的推导过程\u003c/p\u003e\n\u003cp\u003e$$\n\\begin{array}{llr}\nh(t)\u0026amp; = \\lim_{\\Delta t \\to 0} \\frac{P(t \u0026lt; T \\leqslant t + \\Delta t | T \u0026gt; t)}{\\Delta t}\\newline\n\u0026amp; = \\lim_{\\Delta t \\to 0} \\frac{P(t \u0026lt; T \\leqslant t + \\Delta t )}{\\Delta t S(t)} \u0026amp; \\scriptsize{S(t)的定义}\\newline\n\u0026amp; = \\lim_{\\Delta t \\to 0} \\frac{F(t + \\Delta t) - F(t)}{\\Delta t S(t)} \u0026amp; \\scriptsize{F(t)的定义}\\newline\n\u0026amp; = \\frac{f(t)}{S(t)}\u0026amp;  \\scriptsize{f(t)是F(t)的微分}\n\\end{array}\n$$\u003c/p\u003e\n\u003cp\u003e然后还可以进一步推导：\u003c/p\u003e\n\u003cp\u003e$$\nh(t) = \\frac{f(t)}{S(t)} = \\frac{f(t)}{1 - F(t)} = - \\frac{\\partial log[1 - F(t)]}{\\partial t} = - \\frac{\\partial log[S(t)]}{\\partial t}\n$$\u003c/p\u003e\n\u003cp\u003e表示了$h(t)$和$S(t)$的关系\u003c/p\u003e\n\u003cp\u003e$H(t): \\text{Comulative\\ Hazard\\ function}$\n \n$$H(t) = \\int_0^t h(u) du$$\u003c/p\u003e\n\u003cp\u003e进一步推导：\n$$H(t) = \\int_0^t h(u) du = - \\int_0^t \\frac{ \\partial log[S(u)]}{\\partial u} du = -log[S(t)]$$\u003c/p\u003e\n\u003cp\u003e$$\\to S(t) = exp[-H(t)]$$\u003c/p\u003e\n\u003cp\u003e之后的Cox比例风险模型主要关注H(t)\u003c/p\u003e\n\u003ch4 id=\"hazard-function理解\"\u003eHazard function理解\u003c/h4\u003e\n\u003cp\u003ehazard function 本身不是概率，它描述的是一种在给定时间点的风险，$\\Delta t \\times h(t)$表示在$(t, t + \\Delta t]$的概率\u003c/p\u003e\n\u003cp\u003ehazard function优势：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e描述给定时间点的风险，这是我们需要的信息\u003c/li\u003e\n\u003cli\u003e可以很好的处理数据缺失的情况\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"举个例子\"\u003e举个例子\u003c/h4\u003e\n\u003cp\u003e假设survival time服从指数分布$Exp(\\lambda)$，即$f(x) = \\lambda e ^{-\\lambda x}, x \u0026gt; 0$\u003c/p\u003e\n\u003cp\u003e也就是$f(t) = \\lambda e ^{-\\lambda x}$\u003c/p\u003e\n\u003cp\u003e可以推出：\u003c/p\u003e\n\u003cp\u003e$F(t) = 1 - e ^{-\\lambda x}$\u003c/p\u003e\n\u003cp\u003e$S(t) = 1 - F(t) = e ^{-\\lambda x}$\u003c/p\u003e\n\u003cp\u003e$h(t) = \\frac{f(t)}{S(t)} = \\lambda$\u003c/p\u003e\n\u003cp\u003e$H(t) = \\lambda t$\u003c/p\u003e\n\u003cp\u003e$E(T) = \\frac{1}{\\lambda} （指数分布的性质）= \\frac{1}{h(t)}$\u003c/p\u003e\n\u003cp\u003e其他的分布同理\nGamma distribution\nWeibull distribution\nLog-normal distribution\ngenerized gamma distribution...\u003c/p\u003e\n\u003ch4 id=\"删失数据-censoring\"\u003e删失数据 Censoring\u003c/h4\u003e\n\u003cp\u003e生存分析中，很常见的一种特征就是删失数据\u003c/p\u003e\n\u003cp\u003e指的是在临床试验中，出现一些数据丢失的情况，比如病人中途主动退出、无法联系到、结束时还未发生特定事件。保留了从一开始到丢失前进度的数据成为右删失，另一种称为左删失。（后面只讨论右删失）\u003c/p\u003e\n\u003ch5 id=\"type-i-censoring观测时间确定\"\u003eType I Censoring：观测时间确定\u003c/h5\u003e\n\u003cp\u003e每一项数据增加一个表示：\u003c/p\u003e\n\u003cp\u003e$$(U_i, \\delta_i) = {min (T_i, c), I(T_i \\leqslant c)}, i = 1, ... , n$$\u003c/p\u003e\n\u003cp\u003e$$I(T_i \\leqslant C) = \\begin{cases}\n1, \u0026amp; T_i \\leqslant C,\\\n0, \u0026amp; T_i \u0026gt; C\n\\end{cases}$$\u003c/p\u003e\n\u003cp\u003ec是实验时间，是一个常量\n也就是说如果是$(c, 0)$，则代表被删失，如果是$(T_i, 1)$，则没有被删失\u003c/p\u003e\n\u003ch5 id=\"type-ii-censoring观测人数确定\"\u003eType II Censoring：观测人数确定\u003c/h5\u003e\n\u003cp\u003e比如观测n人，当死亡r人时停止试验\n$T_{(1, n)}, T_{(2, n)}, ..., T_{(r, n)}$\u003c/p\u003e\n\u003ch5 id=\"type-iii-censoring随机censoring\"\u003eType III Censoring：随机Censoring\u003c/h5\u003e\n\u003cp\u003e不用常量c而是用随机变量$C_i$\u003c/p\u003e\n\u003cp\u003e$(U_i, \\delta_i) = {min (T_i, C_i), I(T_i \\leqslant C_i)}, i = 1, ... , n$\u003c/p\u003e\n\u003cp\u003e只考虑右删失，我们只观察$(U_i, \\delta_i)$\n如果$(U_i, \\delta_i) = (u_i, 1)$，则说明$T_i = u_i, C_i \u0026gt; u_i$\n如果$(U_i, \\delta_i) = (u_i, 0)$，则说明$T_i \\geqslant u_i, C_i = u_i$\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640245124/survival-analysis-2.png\" alt=\"survival-analysis-2\"\u003e\u003c/p\u003e\n\u003cp\u003e(推导见https://www.bilibili.com/video/BV1WE411P78Z?p=2)\u003c/p\u003e\n\u003ch4 id=\"kaplan-meier模型\"\u003eKaplan-Meier模型\u003c/h4\u003e\n\u003cp\u003e与生存表、Cox并列的一种生存分析的方法，也叫乘积极限(product-limit estimator)\u003c/p\u003e\n\u003cp\u003e$\\hat{S}(t)=\\prod_{i: t_{i} \\leq t}\\left(1-\\frac{d_{i}}{n_{i}}\\right), \\quad t \\geq 0$\u003c/p\u003e\n\u003cp\u003e$d_i$是在$t_i$时刻死亡的人数，$n_i$是还在风险中的人数\u003c/p\u003e\n\u003cp\u003e例子：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640245203/survival-analysis-example-1.png\" alt=\"survival-analysis-example-1\"\u003e\u003c/p\u003e\n\u003ch5 id=\"life-table-生存表\"\u003eLife table 生存表\u003c/h5\u003e\n\u003cp\u003e举例：\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640245336/life-table-1.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e设时间点为$t_0, t_1, ... ,t_n$，那么在$t_i$时间点下的生存概率：\n$$S(t_i) = \\Pi_{j=0}^{i}(1-P(t_j死亡))$$\u003c/p\u003e\n\u003cp\u003e也就是：\n$$S\\left(t_{i}\\right)=S\\left(t_{i-1}\\right)\\left(1-\\frac{d_{i}}{n_{i}}\\right)$$\u003c/p\u003e\n\u003cp\u003e$n_i$表示$t_i$时的有效人数，$d_i$表示$t_i$时的死亡人数\u003c/p\u003e\n\u003cp\u003e$t_i$处的生存率等于$t_{i-1}$时的生存率乘以（1-$t_i$时间点的死亡率）\u003c/p\u003e\n\u003ch5 id=\"kaplan-meier-生存曲线\"\u003eKaplan-Meier 生存曲线：\u003c/h5\u003e\n\u003cp\u003e\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1640245508/km-curve-1.png\" alt=\"\"\u003e\n加号表示删失数据\u003c/p\u003e\n\u003cp\u003e往往是多条线（因为是不同的组）\u003c/p\u003e\n\u003ch4 id=\"cox比例风险回归模型\"\u003eCox比例风险回归模型\u003c/h4\u003e\n\u003cp\u003eCox Proportional-Hazards Model是由英国统计学家D.R.Cox于1972年提出的一种半参数回归模型（半参数值既包含参数模型，又包含非参数模型）\u003c/p\u003e\n\u003cp\u003e参数模型：有限维度，有限个参数就可以表示模型分布，比如正态分布的均值和标准差\n非参数模型：属于某个无限维的空间，无法用有限个参数来表示，比如决策树、随机森林\u003c/p\u003e\n\u003cp\u003eCox建立回归的是前面提到的$h(x)$\nCox模型：\n$$h(t) = h_0(t) \\times exp({b_1x_1 + b_2x_2 + ... b_px_p})$$\u003c/p\u003e\n\u003cp\u003e其中$h(t)$指的是不同时间的风险值（hazard），$x_i$指的是具有预测效应的变量，$b_i$指的是每个变量对应的效应值，$h_0(t)$是基准风险函数，根据不同的数据来使用不同的分布模型，是非参数模型\u003c/p\u003e\n\u003cp\u003e建模时，首先确定需要研究的可能影响生存率的因素，也就是$x_i$，我们主要要做的就是找到合适的$h_0(t)$以及所有协变量的系数$b_p$，需要用到极大似然估计等方法求解参数。\u003c/p\u003e\n\u003ch5 id=\"两个基本假设\"\u003e两个基本假设\u003c/h5\u003e\n\u003cp\u003e对公式两边取对数进行变形：\u003c/p\u003e\n\u003cp\u003e$$log(h(t)) = log(h_0(t)) + \\beta X$$\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e模型中各危险因素对危险率的影响不随时间改变，且与时间无关\u003c/li\u003e\n\u003cli\u003e对数危险率与各个危险因素呈线性相关\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"参数的极大似然估计\"\u003e参数的极大似然估计\u003c/h5\u003e\n\u003cp\u003e通过极大似然估计来求解参数，极大似然估计的思想是，让已经发生的事件出现的可能性最大。\u003c/p\u003e\n\u003cp\u003e举个例子，有三个人$X_1, X_2, X_3$分别在三个时间点$t_1, t_2, t_3$死亡\u003c/p\u003e\n\u003cp\u003e以$t=t_1$为例，此时我们的目标是$max\\ h(t_1, X_1)$和$min\\ h(t_1, X_2) + h(t_1, X_3)$，统一这两个的目标：\u003c/p\u003e\n\u003cp\u003e$$max\\ \\frac{h(t_1, X_1)}{h(t_1, X_1) + h(t_1, X_2) + h(t_1, X_3)}$$\u003c/p\u003e\n\u003cp\u003e（分母加一个分子不影响结果，但是可以让最后一项不至于分母为0）\u003c/p\u003e\n\u003cp\u003e类推得到$t_2$的目标：\n$$max\\ \\frac{h(t_2, X_2)}{h(t_2, X_2) + h(t_2, X_3)}$$\u003c/p\u003e\n\u003cp\u003e$t_3$的目标：\n$$max\\ \\frac{h(t_3, X_3)}{h(t_3, X_3)}$$\u003c/p\u003e\n\u003cp\u003e所以似然函数是：\n$$L(\\beta) = \\frac{h(t_1, X_1)}{h(t_1, X_1) + h(t_1, X_2) + h(t_1, X_3)} \\frac{h(t_2, X_2)}{h(t_2, X_2) + h(t_2, X_3)} \\frac{h(t_3, X_3)}{h(t_3, X_3)}$$\u003c/p\u003e\n\u003cp\u003e代入$h(x)$的公式之后消掉$h_0(t)$，得到：\n$$L(\\beta) = \\frac{exp(\\beta · X_1)}{exp(\\beta · X_1) + exp(\\beta · X_2) + exp(\\beta · X_3)} \\frac{exp(\\beta · X_2)}{exp(\\beta · X_2) + exp(\\beta · X_3)} \\frac{exp(\\beta · X_3)}{exp(\\beta · X_3)}$$\u003c/p\u003e\n\u003cp\u003e这里我们假设的是3个事件，再泛化到N个的情况：\n$$L(\\beta)=\\prod_{i=1}^{N} \\frac{\\exp \\left(\\beta \\cdot X_{i}\\right)}{\\sum_{j: t_{j} \\geq t_{i}} \\exp \\left(\\beta \\cdot X_{j}\\right)}$$\u003c/p\u003e\n\u003cp\u003e对数似然函数：\n$$l(\\beta)=\\log L(\\beta)=\\sum_{i=1}^{N}\\left[\\beta \\cdot X_{i}-\\log \\left(\\sum_{j: t_{j} \\geq t_{i}} \\exp \\left(\\beta \\cdot X_{j}\\right)\\right)\\right]$$\u003c/p\u003e\n\u003cp\u003e梯度为：\n$$\\frac{\\partial l(\\beta)}{\\partial \\beta}=\\sum_{i=1}^{N}\\left[\\beta-\\frac{\\sum_{j: t_{j} \\geq t_{i}} X_{j} \\cdot \\exp \\left(\\beta \\cdot X_{j}\\right)}{\\sum_{j: t_{j} \\geq t_{i}} \\exp \\left(\\beta \\cdot X_{j}\\right)}\\right]$$\u003c/p\u003e\n\u003cp\u003e就可以采用梯度下降法来对参数进行估计\u003c/p\u003e\n\u003ch5 id=\"解读结果\"\u003e解读结果\u003c/h5\u003e\n\u003cp\u003e解得了合适的$h_0(t)$以及协变量系数之后，我们可以比较某个协变量$x_i$在不同值的时候对应的不同风险比$\\frac{x_i + 1}{x_i}$。\u003c/p\u003e\n\u003cp\u003e$$hazard\\ ratio = \\frac{h_0(t) \\times e^{b_1x_1 + b_2x_2 + ...b_i(x_i+1) + ... b_px_p}}{h_0(t) \\times e^{b_1x_1 + b_2x_2  + ...b_ix_i + ... b_px_p}} = e^{b_i}$$\u003c/p\u003e\n\u003cp\u003e举个例子，假如某个指标$x_i$表示年龄，那么对于年龄x和年龄x+1的人来说，死亡风险比是$e^{b_i}$，如果$b_i\u0026gt;0$，则年龄增大，死亡风险增大。反之减小。等于0则是不起作用\u003c/p\u003e\n","date":1608708180,"description":"","fuzzywordcount":2900,"kind":"page","lang":"zh","lastmod":1640259583,"objectID":"0e1e02e38f5d391ab4a52157146d4210","publishdate":1608708180,"relpermalink":"/posts/survival-analysis-basic/","section":"posts","summary":"背景与简介 在生物医学、金融保险等领域，生存分析是一种很常见而且重要的方法。 生存分析主要用在癌症等疾病的研究中，比如对某种抗癌药物做临床试验，筛选一部分癌症患者，","tags":["生存分析","统计学"],"title":"生存分析基础","url":"https://yichengme.site/posts/survival-analysis-basic/","wordcount":2837},{"categories":"posts","content":"\u003ch3 id=\"第一章导论\"\u003e第一章：导论\u003c/h3\u003e\n\u003ch4 id=\"概念部分\"\u003e概念部分\u003c/h4\u003e\n\u003cp\u003e第一台通用电子计算机诞生于1946年\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算机技术的飞速发展得益于\u003c/strong\u003e：计算机制造技术的发展、计算机系统结构的创新\u003c/p\u003e\n\u003cp\u003e纷纷放弃高性能转向多核，标志着系统结构的重大转折：\u003cstrong\u003e从单纯依靠指令集并行转向开发线程级并行和数据集并行\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算机系统的层次结构\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eL6: 应用语言虚拟机\u003c/p\u003e\n\u003cp\u003eL5: 高级语言虚拟机\u003c/p\u003e\n\u003cp\u003eL4: 汇编语言虚拟机\u003c/p\u003e\n\u003cp\u003eL3: 操作系统虚拟机\u003c/p\u003e\n\u003cp\u003eL2: 传统机器级\u003c/p\u003e\n\u003cp\u003eL1: 微程序机器级\u003c/p\u003e\n\u003cp\u003eL1-L3通常使用解释实现（一条一条来）\u003c/p\u003e\n\u003cp\u003eL4-L6通常使用翻译实现（全部翻译成下面一个低级再执行）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算机系统结构定义\u003c/strong\u003e：计算机系统结构是程序员所看到的计算机属性，即概念性结构与功能特性，是计算机系统的\u0008软硬件的界面\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e广义的系统结构\u003c/strong\u003e：指令结构、组成和硬件\u003c/p\u003e\n\u003cp\u003e包括：指令系统、寻址方式、数据表示、寄存器定义、中断系统、工作状态的切换、存储系统、信息保护、I/O结构等\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算机组成\u003c/strong\u003e：计算机系统结构的逻辑实现\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算机实现\u003c/strong\u003e：计算机系统结构的物理实现\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e一种体系结构可以有多种组成，一种组成可以有多种物理实现\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e系统结构的分类\u003c/strong\u003e\n冯氏分类法：按照最大并行度（字宽×一次能处理的字数）分\nFlynn分类：按指令流和数据流的多倍性分，分为以下四类：\u003c/p\u003e\n\u003cp\u003e①单指令流单数据流（SISD）\u003c/p\u003e\n\u003cp\u003e②单指令流多数据流（SIMD）\u003c/p\u003e\n\u003cp\u003e③多指令流单数据流（MISD）\u003c/p\u003e\n\u003cp\u003e④多指令流多数据流（MIMD）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e冯诺依曼结构\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e最大特点：以运算器为中心\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e虚拟机\u003c/strong\u003e：用软件实现的机器\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e系列机\u003c/strong\u003e：同一个厂家生产的具有相同\u0008系统结构但具有不同组成和实现的一系列不同型号的计算机\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e兼容机\u003c/strong\u003e：由不同厂家生产的具有相同系统结构的计算机\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e软件兼容\u003c/strong\u003e：向上兼容、向下兼容、向前兼容和向后兼容，其中向后兼容是系列机的根本特征\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e模拟\u003c/strong\u003e：用软件的方法在一台计算机上实现另一台计算机的指令集（本机要解释执行另一台机子的程序）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e仿真\u003c/strong\u003e：\u0008用一台现有计算机上的微程序去解释实现另一台计算机的指令集（本机要实现另一台机子的指令集）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e并行性\u003c/strong\u003e：包括同时性（同一时刻）和并发性（同一间隔）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e提高并行性的措施\u003c/strong\u003e：时间重叠、资源重复、资源共享\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e耦合度\u003c/strong\u003e：反应计算机之间物理连接的紧密程度和交互强弱，分为紧密耦合系统和松散耦合系统\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e计算机系统设计经常使用的4个定量原理\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e以经常性事件为重点\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAmdahl定律\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCPU性能公式\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e程序的局部性原理\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch4 id=\"计算部分\"\u003e计算部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eAmdahl定律\u003c/strong\u003e（P7）\u003c/p\u003e\n\u003cp\u003e$加速比 = \\frac{执行时间_{改进前}}{执行时间_{改进后}} = \\frac{1}{（ 1 - 可改进比例 ）+ \\frac{可改进比例}{部件加速比} }$\n依赖于可改进比例和部件加速比\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCPU时间\u003c/strong\u003e（P9）\u003c/p\u003e\n\u003cp\u003e$CPU时间 = IC \\times CPI \\times 时钟周期时间$\u003c/p\u003e\n\u003cp\u003e$时钟周期 = \\frac{1}{f}$\u003c/p\u003e\n\u003cp\u003e$MIPS速率 = \\frac{f}{CPI} $\u003c/p\u003e\n\u003cp\u003e执行时间和吞吐率（P11）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e性能比较\u003c/strong\u003e（P14）\u003c/p\u003e\n\u003ch3 id=\"第二章指令集结构\"\u003e第二章：指令集结构\u003c/h3\u003e\n\u003ch4 id=\"概念部分-1\"\u003e概念部分\u003c/h4\u003e\n\u003cp\u003e区别不同指令集结构的主要因素是\u003cstrong\u003eCPU中用来储存操作数的储存单元的类型\u003c/strong\u003e，因此可以把指令集结构分为\u003cstrong\u003e堆栈结构\u003c/strong\u003e、\u003cstrong\u003e累加器结构\u003c/strong\u003e和\u003cstrong\u003e通用寄存器结构\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e寻址方式\u003c/strong\u003e：\n指一种指令集结构如何确定所要访问的数据的地址\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e对指令集的基本要求\u003c/strong\u003e：\n完整性、规整性、高效率和兼容性\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e指令集结构设计涉及的内容\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e① 指令集功能设计，主要由CISC和RISC两种方向\u003c/p\u003e\n\u003cp\u003e② 寻址方式设计\u003c/p\u003e\n\u003cp\u003e③ 操作数表示和操作数类型\u003c/p\u003e\n\u003cp\u003e④ 寻址方式的表示\u003c/p\u003e\n\u003cp\u003e⑤ 指令集格式的设计，变长、固定长度、混合\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e指令集三种编码格式\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e可变长度编码\u003c/p\u003e\n\u003cp\u003e固定长度编码\u003c/p\u003e\n\u003cp\u003e混合型编码\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eRISC遵循的原则\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e① 指令条数少而简单\u003c/p\u003e\n\u003cp\u003e② 采用简单而又统一的指令格式\u003c/p\u003e\n\u003cp\u003e③ 指令的执行在单个机器周期内完成\u003c/p\u003e\n\u003cp\u003e④ 只有load和store能访问存储器\u003c/p\u003e\n\u003cp\u003e⑤ 大多数指令采用硬连逻辑\u003c/p\u003e\n\u003cp\u003e⑥ 强调优化编译器的作用\u003c/p\u003e\n\u003cp\u003e⑦ 充分利用流水线\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eI类指令\u003c/strong\u003e：\nload、store等\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e0-5\u003c/th\u003e\n\u003cth\u003e6-10\u003c/th\u003e\n\u003cth\u003e11-15\u003c/th\u003e\n\u003cth\u003e16-31\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e操作码\u003c/td\u003e\n\u003ctd\u003ers\u003c/td\u003e\n\u003ctd\u003ert\u003c/td\u003e\n\u003ctd\u003e立即数\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003eR类指令\u003c/strong\u003e：\nALU等\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e0-5\u003c/th\u003e\n\u003cth\u003e6-10\u003c/th\u003e\n\u003cth\u003e11-15\u003c/th\u003e\n\u003cth\u003e16-20\u003c/th\u003e\n\u003cth\u003e21-25\u003c/th\u003e\n\u003cth\u003e26-31\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e操作码\u003c/td\u003e\n\u003ctd\u003ers\u003c/td\u003e\n\u003ctd\u003ert\u003c/td\u003e\n\u003ctd\u003erd\u003c/td\u003e\n\u003ctd\u003eshamt\u003c/td\u003e\n\u003ctd\u003efunct\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cbr\u003e\n\u003ch3 id=\"第三章流水线技术\"\u003e第三章：流水线技术\u003c/h3\u003e\n\u003ch4 id=\"概念部分-2\"\u003e概念部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e流水线技术的概念\u003c/strong\u003e：\n把一个重复的过程分解为若干个子过程，每一个子过程用一个专门的部件来实现。多个处理过程在时间上错开依次通过各段，让每个子过程和其他过程并行，这就是流水线技术\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e流水线技术的特点\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e① 流水线把一个处理过程分解为若干个子过程，每个子过程由一个专门的功能部件来实现，依靠它们的并行工作来缩短程序的执行时间\u003c/p\u003e\n\u003cp\u003e② 流水线各段时间应该尽可能相等\u003c/p\u003e\n\u003cp\u003e③ 流水线的每一个功能部件的后面都要有一个缓冲存储器\u003c/p\u003e\n\u003cp\u003e④ 流水线适合于大量重复的时序过程\u003c/p\u003e\n\u003cp\u003e⑤ 流水线需要有通过时间和排空时间\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e流水线分类\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e单功能流水线：只能完成一种固定功能\u003c/p\u003e\n\u003cp\u003e多功能流水线：可以实现不同的功能\u003c/p\u003e\n\u003cp\u003e静态流水线：同一时间各段只能按照同一种功能的连接方式工作\u003c/p\u003e\n\u003cp\u003e动态流水线：同一时间各段可以有不同的连接，执行多种功能\u003c/p\u003e\n\u003cp\u003e部件级流水线：把运算部件分段\u003c/p\u003e\n\u003cp\u003e处理机级流水线：把指令的解释执行过程分段\u003c/p\u003e\n\u003cp\u003e处理机间流水线：在处理机间流水\u003c/p\u003e\n\u003cp\u003e线性流水线：没有反馈回路\u003c/p\u003e\n\u003cp\u003e非线性流水线：有反馈回路\u003c/p\u003e\n\u003cp\u003e顺序流水线：任务流出流入的顺序一致\u003c/p\u003e\n\u003cp\u003e乱序流水线：任务流出的顺序和流入的顺序可以不一样\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e解决流水线瓶颈问题的方法\u003c/strong\u003e\n细分瓶颈段、重复设置瓶颈段\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e经典的五段流水线划分\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e一条指令的执行过程可以划分为以下五个部分：\u003c/p\u003e\n\u003cp\u003e取指令周期（IF）\u003c/p\u003e\n\u003cp\u003e指令译码/读寄存器（ID）\u003c/p\u003e\n\u003cp\u003e执行/有效地址计算（EX）\u003c/p\u003e\n\u003cp\u003e存储器访问/分支完成（MEM）\u003c/p\u003e\n\u003cp\u003e写回周期（WB）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e相关的概念\u003c/strong\u003e：相关是指两条指令之间存在某种依赖关系\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e相关的分类\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e数据相关：指令之间有数据关联（有传递性）\u003c/p\u003e\n\u003cp\u003e名相关：名指的是寄存器名或存储器名，数据不关联但是用了相同的名，名相关又分为反相关（一写一读）和输出相关（都写）\u003c/p\u003e\n\u003cp\u003e控制相关：由分支指令引起的相关\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e流水线冲突的概念\u003c/strong\u003e：\n对于具体的流水线而言，由于相关的存在，导致指令流的下一条指令不能在指定的时钟周期执行\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e流水线冲突的分类\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e结构冲突：硬件资源无法满足重叠执行的要求\u003cbr\u003e\n     — 消除结构冲突：气泡停顿、设置独立指令数据存储器、Cache分为指令Cache和数据Cache\n数据冲突：重叠执行时需要用到前面的数据\u003cbr\u003e\n     — 数据冲突分为：写后读（RAW）、写后写（WAW）\u003c/p\u003e\n\u003cp\u003e     — 解决数据冲突：定向技术（直接从产生的地方送到需要的地方）、通过编译器指令调度解决\n控制冲突：分支指令等引起的冲突\u003cbr\u003e\n     — 解决控制冲突：冻结或排空流水线（最简单但是分支延迟大）、尽早判断分支是否成功（提前到ID段末尾）、软件方法\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e减少分支延迟的静态方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e预测分支失败\u003c/p\u003e\n\u003cp\u003e预测分支成功\u003c/p\u003e\n\u003cp\u003e延迟分支（在延迟槽中放入有用的指令，三种调度方法：从前调度、从目标处调入、从失败处调入）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e不采用单周期的原因\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e① 单周期效率低，不同指令需要的时钟周期不一样\u003c/p\u003e\n\u003cp\u003e② 单周期需要重复设置部件，而多周期可以共享\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e流水寄存器的作用\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e① 将各段隔开来，使之不会相互干扰\u003c/p\u003e\n\u003cp\u003e② 保存相应段的处理结果\u003c/p\u003e\n\u003cp\u003e③ 向后传递后面要用到的数据或控制信息\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e流水线的实现（P82 - P90）\u003c/strong\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e$IF/IR$\u003c/th\u003e\n\u003cth\u003e$IR/EX$\u003c/th\u003e\n\u003cth\u003e$EX/MEM$\u003c/th\u003e\n\u003cth\u003e$MEM/WD$\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e$NPC$\u003c/td\u003e\n\u003ctd\u003e$NPC$\u003c/td\u003e\n\u003ctd\u003e$cond$\u003c/td\u003e\n\u003ctd\u003e$LMD$\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$IR$\u003c/td\u003e\n\u003ctd\u003e$A$\u003c/td\u003e\n\u003ctd\u003e$ALU0$\u003c/td\u003e\n\u003ctd\u003e$ALU0$\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e$B$\u003c/td\u003e\n\u003ctd\u003e$B$\u003c/td\u003e\n\u003ctd\u003e$IR$\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e$Imm$\u003c/td\u003e\n\u003ctd\u003e$IR$\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e$IR$\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch4 id=\"计算部分-1\"\u003e计算部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e吞吐率\u003c/strong\u003e：单位时间内流水线完成的任务数量\u003c/p\u003e\n\u003cp\u003e$TP = \\frac{n}{T_k}$\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e加速比\u003c/strong\u003e：不用流水线所用的时间和用流水线所用时间之比\u003c/p\u003e\n\u003cp\u003e$S = \\frac{T_s}{T_k}$\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e效率\u003c/strong\u003e：设备实际使用时间与整个运行时间之比（画图之后即为阴影面积/完整面积）\u003c/p\u003e\n\u003cp\u003e易出大题（P61 例题3.1、P104 章后习题3.11）\n\u0008\u003cstrong\u003e务必注意题目里说的是静态流水线还是动态流水线\u003c/strong\u003e，静态流水线必须一个操作做完之后 才能开另一个功能，参见P60例3.1个P60例3.2\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"第四章指令级并行\"\u003e第四章：指令级并行\u003c/h3\u003e\n\u003ch4 id=\"概念部分-3\"\u003e概念部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e指令级并行概念\u003c/strong\u003e：利用流水线使指令重叠并行执行，这种指令之间潜在并行性称为指令级并行（ILP，Instruction-Level Parallelism）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCPI\u003c/strong\u003e：（Cycles Per Instruction）每条指令所消耗的时钟周期数\n\u003cstrong\u003eIPC\u003c/strong\u003e：（Instructions Per Cycle）每个时钟周期完成的指令条数\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e基本程序块\u003c/strong\u003e：一段除了入口和出口之外不包含其他分支的线性代码段（就是指中间没分支）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e循环级并行\u003c/strong\u003e：让一个循环中的不同循环体并行执行\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e开发循环级并行的技术\u003c/strong\u003e：循环展开技术、采用向量指令和向量数据表示\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e指令顺序\u003c/strong\u003e：由源程序确定的在完全串行方式下指令的执行顺序\u003c/p\u003e\n\u003cp\u003e正确执行程序\u003cstrong\u003e必须保持的最关键的两个因素\u003c/strong\u003e：数据流（数据从其产生者指令到消费者指令的实际流动）和异常行为（无论怎么改变顺序，都不影响程序中异常的发生情况）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e指令调度\u003c/strong\u003e：通过在编译时让编译器重新组织指令顺序或者通过硬件在执行时调整指令顺序来消除冲突\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e静态调度与动态调度\u003c/strong\u003e：第三章为静态调度，第四章为动态调度，以下为二者区别：\n① 静态调度发生在编译过程中，动态调度发生在运行过程中\n② 动态调度相比静态有更多优点：能够处理一些编译时不明确的相关、能够套用在其他流水线上\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e精确异常和不精确异常\u003c/strong\u003e：\n精确异常：发生异常时，处理机的现场和严格按程序顺序执行时的\u0008现场相同\n不精确异常：发生异常时，处理机的现场和严格按程序顺序执行时的\u0008现场不同\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTomasulo算法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e保留栈\u003c/strong\u003e：在采用Tomasulo算法的MIPS处理器浮点部件中，在运算部件的入口设置的用来保存已经流出并等待到本功能部件执行的指令\n\u003cstrong\u003eCDB\u003c/strong\u003e：公共数据总线\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eROB\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e动态分支预测技术\u003c/strong\u003e：根据分支指令过去的表现来预测其将来的行为\n\u003cstrong\u003eBHT\u003c/strong\u003e：分支历史表，用于记录相关分支指令最近几次的执行情况并根据此进行预测\n\u003cstrong\u003e分支目标缓冲\u003c/strong\u003e：是一种动态分支预测技术，将执行过的成功的分支指令的地址和预测的分支目标地址记录在一个硬件表中，每次取指令时比较，达到减少分支开销的作用\n\u003cstrong\u003e前瞻执行\u003c/strong\u003e：解决控制相关的方法，对分支指令的结果进行预测，按照这个预测结果继续后续的过程，不过指令执行的结果不是放在寄存器或存储器中，而是放在ROB缓冲器中，相应指令确认后才将结果写到寄存器或存储器\n\u003cstrong\u003eROB\u003c/strong\u003e：前瞻执行缓冲器\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e多流出处理机的两种基本风格\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e超标量：一种多指令流出技术，每个时钟周期流出的指令条数不确定，但有个上限\n超长指令字：一种多指令流出技术，每个时钟周期流出的指令条数是固定的，这些指令构成一条长指令或者指令包，通过编译器静态调度\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e超流水\u003c/strong\u003e\n一个时钟周期内分时流出多条指令\u003c/p\u003e\n\u003ch4 id=\"计算部分-2\"\u003e计算部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e实际CPI\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e$CPI_{流水线} = CPI_{理想} + 停顿_{结构冲突} + 停顿_{数据冲突} + 停顿_{控制冲突}$\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"第五章存储系统\"\u003e第五章：存储系统\u003c/h3\u003e\n\u003ch4 id=\"概念部分-4\"\u003e概念部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e人们追求的储存器特性\u003c/strong\u003e：容量大、速度快、价格低\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e走出困境的唯一方法\u003c/strong\u003e：采用多级存储层次结构\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e多级存储层次\u003c/strong\u003e：采用不同的技术实现的存储器，处在离CPU不同位置的层次上，各存储器之间一般满足包容关系，任何一层存储器中的内容都是其下一层的储存器内容的子集。目标是达到离CPU最近的存储器的速度，最远的存储器的容量。\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e“Cache-主存”与“主存-辅存”的区别\u003c/strong\u003e\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e\u003c/th\u003e\n\u003cth\u003eCache-主存层次\u003c/th\u003e\n\u003cth\u003e主存-辅存层次\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e目的\u003c/td\u003e\n\u003ctd\u003e为了弥补主存速度的不足\u003c/td\u003e\n\u003ctd\u003e为了弥补主存容量的不足\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e存储管理的实现\u003c/td\u003e\n\u003ctd\u003e由专用硬件实现\u003c/td\u003e\n\u003ctd\u003e由软件实现\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e访问速度的比值\u003c/td\u003e\n\u003ctd\u003e几比一\u003c/td\u003e\n\u003ctd\u003e几万比一\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e块/页大小\u003c/td\u003e\n\u003ctd\u003e几十个字节\u003c/td\u003e\n\u003ctd\u003e几百到几千字节\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eCPU对第二级的访问方式\u003c/td\u003e\n\u003ctd\u003e可以直接访问\u003c/td\u003e\n\u003ctd\u003e均通过第一级\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e不命中时是否切换\u003c/td\u003e\n\u003ctd\u003e不切换\u003c/td\u003e\n\u003ctd\u003e切换到其他进程\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003e映像规则\u003c/strong\u003e\n全相联映像：主存中的任意一块可以被放置到Cache中的任意一个位置，空间利用率最高、冲突概率最低、实现最复杂\n直接映像：    主存中的\u0008每一块只能被放到Cache中唯一的位置，空间利用率最低、冲突概率最高、实现最简单\n组相联映像：主存中的每一块可以被放置到Cache中唯一一组中的任何一个位置，是上面二者的折中\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e查找算法\u003c/strong\u003e\n查找Cache在哪，通过查找目录表实现，目录表项与储存器块对应\u003c/p\u003e\n\u003cp\u003e目录表\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e有效位\u003c/th\u003e\n\u003cth\u003e标识\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003c/table\u003e\n\u003cp\u003e有效位为1表示有效，标识tag标识了存放的信息存在于哪个主存块中\u003c/p\u003e\n\u003cp\u003e主存地址\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e标识\u003c/th\u003e\n\u003cth\u003e索引\u003c/th\u003e\n\u003cth\u003e块内位移\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003e替换算法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e随机法\u003c/p\u003e\n\u003cp\u003eFIFO\u003c/p\u003e\n\u003cp\u003eLRU\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eLRU算法的硬件实现\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e堆栈法\u003c/p\u003e\n\u003cp\u003e比较对法\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e写策略\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e写直达法：执行写操作时，不仅写入Cache，而且也直接写入下一级存储器（易于实现）\n（不按写分配，不命中直接写入下一级而不调块）\u003c/p\u003e\n\u003cp\u003e写回法：执行写操作时，只写入Cache。仅当Cache中相应的块被替换\u0008时，才写回主存（速度快）\n（按写分配，不命中时调块）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCache对低CPI、高时钟频率的CPU来说更为重要\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e改进Cache性能\u0008\u003c/strong\u003e\n包括三个方面：\u003c/p\u003e\n\u003cp\u003e① 降低不命中率（8种）\u003c/p\u003e\n\u003cp\u003e② 减少不命中开销（5种）\u003c/p\u003e\n\u003cp\u003e③ 减少Cache命中时间（4种）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e三种类型的不命中\u003c/strong\u003e\n强制性不命中：首次访问就没命中\n\u0008容量不命中：某些块被\u0008替换了，之后又访问了这些块（原因主要是容量小了）\n冲突不命中：组相联或直接映像很多块映到了同一组（块）中，原块被替换，之后又访问了这些块\u003c/p\u003e\n\u003cp\u003e相联度越高，冲突不命中就越少（因为每块可选的位置变多了，冲突几率下降），对强制不命中和容量不命中没什么影响\u003c/p\u003e\n\u003cp\u003eCache\u0008容量增加，容量不命中下降，对强制性不命中没影响\u003c/p\u003e\n\u003cp\u003e减少三种不命中的方法：\n强制性不命中：增加块大小，\u0008预取（本身比例很少）\n容量不命中：增加容量\n冲突不命中：提高相联度（理想情况：全相联）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e降低不命中率的八种方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e① 增加Cache块大小\u003cbr\u003e\n            最简单，减少强制不命中，但增加了冲突不命中（因为块的个数少了），同时也会增大不命中开销\u003c/p\u003e\n\u003cp\u003e② 增加Cache容量\u003cbr\u003e\n            最直接，但会增加成本和命中时间\u003c/p\u003e\n\u003cp\u003e③ 提高相联度\u003cbr\u003e\n            会增加命中时间\n         （2:1Cache经验规则：容量为N的直接映像Cache的不命中率和容量为N/2的两路组相联Cache的不命中率差不多）\u003c/p\u003e\n\u003cp\u003e④ 伪相联Cache\u003cbr\u003e\n            访问\u0008如果命中就和直接映像一样，如果不命中就检查另一个位置是否匹配，简单的方法是将索引的最高位取反。保持命中速度和低不命中率，会让CPU流水线的设计复杂化\u003c/p\u003e\n\u003cp\u003e⑤ 硬件预取\u003cbr\u003e\n            指令和数据在处理器提出访问之前进行预取，由Cache之外的硬件完成，放入一个缓冲器中。预取应当利用存储器的空闲带宽，不能影响对正常不命中的处理，否则可能会降低性能\u003c/p\u003e\n\u003cp\u003e⑥ 编译器控制的预取\u003cbr\u003e\n            由编译器在程序中加入预取指令实现预取。每次预取需要花费一条指令的开销\u003c/p\u003e\n\u003cp\u003e⑦ 编译器优化\u003cbr\u003e\n            三种方法：代码和数据重组、内外循环交换、分块\u003c/p\u003e\n\u003cp\u003e⑧ 牺牲Cache\u003cbr\u003e\n            在Cache和下一级之间设置一个全相联小Cache来存储被替换掉的块，减少冲突不命中很有效，尤其是小容量Cache\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e减少Cache不命中开销的五种方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e① 采用两级Cache（有计算）\u003c/p\u003e\n\u003cp\u003e② 让读不命中优先于写\n            会增加命中时间\u003c/p\u003e\n\u003cp\u003e③ 写缓冲合并\u003cbr\u003e\n            写入的数据与缓冲器已有地址比较，如果有地址匹配的就合并\u003c/p\u003e\n\u003cp\u003e④ 请求字处理技术\u003cbr\u003e\n            从下一级调入Cache的块只有一个字是立即需要的，称为请求字，两种方法：尽早重启动、请求字优先\u003cbr\u003e\n            在Cache块较小或者下一条指令正好访问Cache块的另一部分时，效果不明显\u003c/p\u003e\n\u003cp\u003e⑤ 非阻塞Cache技术\u003cbr\u003e\n            在Cache不命中时仍允许CPU进行其他的命中访问\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e减少Cache命中\u0008时间的四种方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e① 容量小、结构简单的Cache\u003cbr\u003e\n            增大不命中率\u003c/p\u003e\n\u003cp\u003e② 虚拟Cache\u003cbr\u003e\n            可以直接用虚拟地址进行访问的Cache\u003c/p\u003e\n\u003cp\u003e③ Cache访问流水化\u003cbr\u003e\n            把对第一级Cache的访问按流水方式组织\u003c/p\u003e\n\u003cp\u003e④ 踪迹Cache\u003cbr\u003e\n            存放CPU所执行过的动态序列，包含分支预测展开的指令\u003cbr\u003e\n            地址映像机制复杂，相同的指令序列可能被重复存放，提高了Cache的空间利用率\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e主存主要的性能指标\u003c/strong\u003e：延迟和带宽\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e并行主存系统\u003c/strong\u003e：在一个访存周期内能并行访问多个储存字的存储器\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e并行存储器结构包括\u003c/strong\u003e：\n单体多字存储器\n多体交叉存储器\u003c/p\u003e\n\u003ch4 id=\"计算部分-3\"\u003e计算部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e平均每位价格C、命中率H、平均访存时间\u003c/strong\u003e（P155）\u003c/p\u003e\n\u003cp\u003e$M_1{T_1, S_1, C_1}、M_2{T_2, S_2, C_2}$\u003c/p\u003e\n\u003cp\u003eT: 平均访存时间，S: 存储容量，C: 平均每位价格\u003c/p\u003e\n\u003cp\u003e平均每位价格 = $\\frac{M_1C_1 + M_2C_2}{M_1 + M_2}$\u003c/p\u003e\n\u003cp\u003e命中率 = $\\frac{N_1}{N_1+N_2}$\u003c/p\u003e\n\u003cp\u003e平均访存时间 = $HT_1 + (1-H)(T_1+T_M) = T_1 + (1-H)T_M = T_1 + FT_M$\n不命中开销 $T_M = T_2 + T_B$\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCache的容量\u003c/strong\u003e（P163）\u003c/p\u003e\n\u003cp\u003eCache容量 = $2^{index} \\times$ 相联度 $\\times$ 块大小\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e程序执行时间\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e$CPU$时间 = $IC \\times (CPI + $每条指令的平均访存次数$\\times $不命中率$ \\times $不命中开销$) \\times $时钟周期时间\u003c/p\u003e\n\u003cp\u003e（P172例题）\u003c/p\u003e\n\u003ch3 id=\"第六章输入输出系统\"\u003e第六章：输入输出系统\u003c/h3\u003e\n\u003ch4 id=\"概念部分-5\"\u003e概念部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eI/O系统包括\u003c/strong\u003e：I/O设备、I/O设备与处理机的连接\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e系统的响应时间\u003c/strong\u003e：从用户输入命令开始，到得到结果所花费的时间（等于I/O系统的响应时间+CPU的处理时间）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eI/O系统的三个性能指标\u003c/strong\u003e\n可靠性：一直连续提供服务的能力，用平均无故障时间MTTF衡量，其倒数为失效率（计算时失效率可累加，倒数相加再倒）\n可用性：正常工作的时间在连续两次正常服务间隔中的比例    可用性=$\\frac{MTTF}{MTTF+MTTR}$\n可信性：服务的质量（无法度量）\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e磁盘阵列\u003c/strong\u003e：使用多个磁盘的组合来代替一个大容量的磁盘\n阵列的并行性包括：多个请求可以由多个盘来并行处理、一个请求访问多个块也可以多个块合作地并行处理\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e各种RAID\u003c/strong\u003e\n（检测盘个数是数据盘个数为8个时所需要的检测盘个数）\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e名称\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003cth\u003e可容忍故障\u003c/th\u003e\n\u003cth\u003e检测盘个数\u003c/th\u003e\n\u003cth\u003e优点\u003c/th\u003e\n\u003cth\u003e缺点\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eRAID0\u003c/td\u003e\n\u003ctd\u003e非冗余阵列，没有冗余信息\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e0\u003c/td\u003e\n\u003ctd\u003e无空间开销\u003c/td\u003e\n\u003ctd\u003e无纠错能力\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRAID1\u003c/td\u003e\n\u003ctd\u003e镜像盘，\u0008每个磁盘都有备份\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e8\u003c/td\u003e\n\u003ctd\u003e计算少，快\u003c/td\u003e\n\u003ctd\u003e空间开销大\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRAID2\u003c/td\u003e\n\u003ctd\u003e汉明纠错码位交叉\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e4\u003c/td\u003e\n\u003ctd\u003e不依靠故障盘诊断\u003c/td\u003e\n\u003ctd\u003e空间开销log\u003csub\u003e2\u003c/sub\u003en\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRAID3\u003c/td\u003e\n\u003ctd\u003e位交叉奇偶校验磁盘阵列\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e空间开销小，大规模I/O带宽高\u003c/td\u003e\n\u003ctd\u003e小规模I/O支持不好\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRAID4\u003c/td\u003e\n\u003ctd\u003e块交叉奇偶校验磁盘阵列\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e空间开销小，小规模I/O带宽高\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRAID5\u003c/td\u003e\n\u003ctd\u003e块交叉分布奇偶校验磁盘阵列\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e1\u003c/td\u003e\n\u003ctd\u003e空间开销小，小规模I/O带宽高\u003c/td\u003e\n\u003ctd\u003e小规模读写需要访问4次\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eRAID6\u003c/td\u003e\n\u003ctd\u003eP+Q双校验磁盘阵列\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e2\u003c/td\u003e\n\u003ctd\u003e容忍两个磁盘出错\u003c/td\u003e\n\u003ctd\u003e小规模读写需要访问6次\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003e实现盘阵列的方式\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e软件方式\u003c/p\u003e\n\u003cp\u003e阵列卡方式\u003c/p\u003e\n\u003cp\u003e子系统方式\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e通道处理机\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e专门负责\u0008整个计算机的输入输出工作，通道处理机只能执行有限的一组输入输出指令\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e输入输出系统的层次\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eCPU-\u0026gt;通道-\u0026gt;设备控制器-\u0026gt;外设\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e通道的主要硬件\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e寄存器\u003c/p\u003e\n\u003cp\u003e控制逻辑\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e通道的工作过程\u003c/strong\u003e（3步）\u003c/p\u003e\n\u003cp\u003e① 在用户程序中启动一个访管指令，由管理程序来编制一个通道程序，并启动通道\u003c/p\u003e\n\u003cp\u003e② 通道处理机执行通道程序，完成指定的数据的输入输出工作\u003c/p\u003e\n\u003cp\u003e③ 通道程序结束后向CPU发出中断请求\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e通道的种类\u003c/strong\u003e（3种）\u003c/p\u003e\n\u003cp\u003e① 字节多路通道，为多台低中速外设服务，以字节交叉的方式分时轮流服务，可以包含多个子通道，每个子通道连接一台设备控制器\u003c/p\u003e\n\u003cp\u003e② 选择通道，为多台高速外围设备服务，一段时间内只为一条高速外设独占\u003c/p\u003e\n\u003cp\u003e③ 数组多路通道，适用于高速设备，每次选择一个高速设备后传送一个数据块，轮流为多台外围设备服务\u003c/p\u003e\n\u003ch4 id=\"计算部分-4\"\u003e计算部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003e通道流量分析（P238）\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e字节多路通道：（连一个外设，传一个字节，再连一个外设，传一个字节...）\u003c/p\u003e\n\u003cp\u003ep台设备传输n个数据所需时间：$T_{BYTE}=(T_S+T_D)\\times p\\times n$\u003c/p\u003e\n\u003cp\u003e最大流量：$f_{MAX-BYTE} = \\frac{1}{T_S+T_D}$\u003c/p\u003e\n\u003cp\u003e选择通道：（一台设备的数据传输工作全部结束后通道才为另一台设备服务）\u003c/p\u003e\n\u003cp\u003ep台设备传输n个数据所需时间：$T_{SELECT}=(\\frac{T_S}{n}+T_D)\\times p\\times n$\u003c/p\u003e\n\u003cp\u003e最大流量：$f_{MAX-SELECT} = \\frac{1}{\\frac{T_S}{n}+T_D}$\u003c/p\u003e\n\u003cp\u003e数组多路通道：（连一个外设，传一个k个字节的数据块，再连一个外设，传一个k个字节的数据块...）\u003c/p\u003e\n\u003cp\u003ep台设备传输n个数据所需时间：$T_{BLOCK}=(\\frac{T_S}{k}+T_D)\\times p\\times n$\u003c/p\u003e\n\u003cp\u003e最大流量：$f_{MAX-BLOCK} = \\frac{1}{\\frac{T_S}{k}+T_D}$\u003c/p\u003e\n\u003cbr\u003e\n\u003ch3 id=\"第八章多处理机\"\u003e第八章：多处理机\u003c/h3\u003e\n\u003ch4 id=\"概念部分-6\"\u003e概念部分\u003c/h4\u003e\n\u003cp\u003e\u003cstrong\u003eMIMD的成为通用多处理机系统结构的选择的原因\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eMIMD具有灵活性\u003c/p\u003e\n\u003cp\u003eMIMD可以充分利用现有微处理机的性价比优势\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMIMD的分类\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e集中式共享存储器结构\u003c/strong\u003e（CSMA、UMA、对称式共享存储器多处理机SMP）\u003c/p\u003e\n\u003cp\u003e多个处理器共享一个集中式的物理存储器，单一主存而且主存对于各处理器而言是对等的\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e分布式存储器多处理机\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e存储器分布到各个处理器上，优点：\u003c/p\u003e\n\u003cp\u003e①降低对存储器和互联网络的带宽要求\u003c/p\u003e\n\u003cp\u003e②对本地存储器的访问延迟时间小；\u003c/p\u003e\n\u003cp\u003e缺点：处理器之间的通信较为复杂，访问延迟大\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e两种储存器系统结构\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e共享地址空间：物理上分离的所有储存器作为一个统一的共享逻辑空间进行编址，不同处理器的同一个物理地址指向同一个存储单元\u003c/p\u003e\n\u003cp\u003e独立编址：每个节点的存储器编址为一个独立的地址空间，不同\u0008处理器的地址是独立的。每一个处理器-存储器模块实际上是一台单独的计算机\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e两种通信机制\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e共享存储器通信机制：处理器之间通过store-load对相同存储器地址进行读写来实现的\n优点：\u003c/p\u003e\n\u003cp\u003e① 与常用的SMP通信机制兼容\u003c/p\u003e\n\u003cp\u003e② 易于编程\u003c/p\u003e\n\u003cp\u003e③ 数据量小时开销较低\u003c/p\u003e\n\u003cp\u003e④ 可以采用cache来减少远程通信的频度\u003c/p\u003e\n\u003cp\u003e消息传递通信机制：处理器之间通过发送消息来进行通信\u003c/p\u003e\n\u003cp\u003e优点\u003c/p\u003e\n\u003cp\u003e① 硬件简单\u003c/p\u003e\n\u003cp\u003e② 通信是显式的\u003c/p\u003e\n\u003cp\u003e③ 减少不当的同步带来的可能的错误\u003c/p\u003e\n\u003cp\u003e④ 显式通信让编程者重点关注主要通信开销\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCache一致性协议\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e监听式协议\u003c/p\u003e\n\u003cp\u003e目录式协议\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eCache一致性问题解决方法\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e写作废协议\u003c/p\u003e\n\u003cp\u003e写更新协议\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e同时多线程技术\u003c/strong\u003e：\u003c/p\u003e\n\u003cp\u003e一种在多流出、动态调度的处理器上同时开发线程级并行和指令级并行的技术\u003c/p\u003e\n","date":1591254309,"description":"","fuzzywordcount":8000,"kind":"page","lang":"zh","lastmod":1640591205,"objectID":"0ec51da4f6170c7bf6de905b849dbfde","publishdate":1591254309,"relpermalink":"/posts/computer-system-structure-1/","section":"posts","summary":"第一章：导论 概念部分 第一台通用电子计算机诞生于1946年 计算机技术的飞速发展得益于：计算机制造技术的发展、计算机系统结构的创新 纷纷放弃高性能转向多核，标志着系统","tags":["系统结构"],"title":"计算机系统结构","url":"https://yichengme.site/posts/computer-system-structure-1/","wordcount":7980},{"categories":"posts","content":"\u003ch4 id=\"背景\"\u003e背景\u003c/h4\u003e\n\u003cp\u003emongodb是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。它是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。\u003c/p\u003e\n\u003cp\u003e这里简单的讲一下使用方法，不涉及底层理论\u003c/p\u003e\n\u003ch4 id=\"起步\"\u003e起步\u003c/h4\u003e\n\u003ch5 id=\"mac下安装mongodb\"\u003eMac下安装MongoDB\u003c/h5\u003e\n\u003cp\u003e之前是\n\u003ccode\u003ebrew install mongodb\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e但是现在会报错：No available formula with the name “mongodb”。\u003c/p\u003e\n\u003cp\u003e先tap一个仓库 \u003ccode\u003ebrew tap mongodb/brew\u003c/code\u003e\n安装mongodb社区版 \u003ccode\u003ebrew install mongodb-community\u003c/code\u003e\u003c/p\u003e\n\u003ch5 id=\"运行mongod\"\u003e运行mongod\u003c/h5\u003e\n\u003cp\u003e新建一个\u003ccode\u003e/data/db\u003c/code\u003e文件夹\u003c/p\u003e\n\u003cp\u003e运行MongoDB服务\n\u003ccode\u003esudo mongod\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e（注：macOS 10.15 Catalina无法在根目录下进行修改，可以在其他目录新建，启动服务时通过\u003ccode\u003esudo mongod --dbpath=new_path/data/db\u003c/code\u003e指定）\u003c/p\u003e\n\u003cp\u003e定位和启动MongoDB命令行\n\u003ccode\u003ecd /usr/local/Cellar/mongodb/4.0.3_1/bin\u003c/code\u003e\n\u003ccode\u003e./mongo\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eMongoDB和关系型数据库（Oracle、MySQL等）的区别：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eSQL\u003c/th\u003e\n\u003cth\u003eMongoDB\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003etable\u003c/td\u003e\n\u003ctd\u003ecollection(集合)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003erow\u003c/td\u003e\n\u003ctd\u003edocument(文档)\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003ecolume\u003c/td\u003e\n\u003ctd\u003efield(数据字段)\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e每个文档是一组键值对（BSON）相同的字段不需要相同的数据类型\u003c/p\u003e\n\u003ch4 id=\"基本命令\"\u003e基本命令\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003eshow dbs\u003c/code\u003e 展示所有数据库\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003euse xx\u003c/code\u003e 使用某个数据库\u003c/p\u003e\n\u003cp\u003e使用了某个数据库后：\u003ccode\u003eshow collections\u003c/code\u003e查看所有的集合\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edb.dropDatabase()\u003c/code\u003e 删除当前数据库\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003edb.\u0026lt;col\u0026gt;.drop()\u003c/code\u003e 删除某个集合\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emongodump -o \u0026lt;output_path\u0026gt;\u003c/code\u003e 导出数据库\n（如果设置了密码，需要通过下面的命令导出）\n\u003ccode\u003esudo mongodump -o \u0026lt;output_path\u0026gt; --authenticationDatabase admin --username \u0026lt;db_username\u0026gt; --password \u0026lt;db_password\u0026gt;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003emongorestore -d \u0026lt;dbname\u0026gt; \u0026lt;db_path\u0026gt;\u003c/code\u003e 导入数据库\u003c/p\u003e\n\u003ch5 id=\"验证\"\u003e验证\u003c/h5\u003e\n\u003cp\u003e本地的还好，如果部署到服务器上，默认是无法外网访问数据库的，倘若你想访问，就得开放端口然后在mongo的配置文件里设置0.0.0.0。然后mongo默认也没有密码\u003c/p\u003e\n\u003cp\u003e这就会产生一个很蛋疼的事，当其他人访问你服务器的ip的27017端口时，可以直接完全操作你的数据库，对于非个人弄着玩的项目，这显然是不可能接受的。\u003c/p\u003e\n\u003cp\u003e所以我们需要增加数据库验证，这里最常见的就是增加账号密码登录，方法如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"o\"\u003e//\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e先使用\u003c/span\u003e\u003cspan class=\"k\"\u003eadmin\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eadmin\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e//\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e创建\u003c/span\u003e\u003cspan class=\"n\"\u003eroot密码\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"k\"\u003ecreateUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e{\u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;root\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003epwd\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003eroles\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;root\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e其他的role：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eread\nreadWrite\ndbAdmin\nuserAdmin\nclusterAdmin\nreadAnyDatabase\nreadWriteAnyDatabase\nuserAdminAnyDatabase\ndbAdminAnyDatabase\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"o\"\u003e//\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e创建用户\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003edb\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"k\"\u003ecreateUser\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"k\"\u003euser\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003epwd\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"n\"\u003eroles\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;userAdminAnyDatabase\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;dbAdminAnyDatabase\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;readWriteAnyDatabase\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003e}\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在\u003ccode\u003e/etc/mongo.conf\u003c/code\u003e配置文件里，把auth=true前面的\u003ccode\u003e#\u003c/code\u003e去掉，让验证生效。\u003c/p\u003e\n\u003cp\u003e重启mongodb服务\u003ccode\u003esudo service mongodb restart\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e之后的连接方式：mongo命令行连接：\n\u003ccode\u003emongo admin -u username -p password\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e本地GUI（如navicat）连接，设置账号密码即可\u003c/p\u003e\n\u003ch5 id=\"字段操作\"\u003e字段操作\u003c/h5\u003e\n\u003cp\u003e字段重命名：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.col.update({},{$rename:{\u0026quot;old_field\u0026quot;:\u0026quot;new_field\u0026quot;}},false,true)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e比如：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.questionnaire.update({},{$rename:{\u0026quot;questionList\u0026quot;:\u0026quot;question\u0026quot;}},false,true)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e字段增加：\n还可以指定默认值xxx\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.col.update({},{$set:{new_field:'xxx'}},{multi:true})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e字段删除：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.col.update({},{$unset:{'old_field':''}},false, true)\n\u003c/code\u003e\u003c/pre\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.user_questionnaire.update({},{$unset:{'inputCostEstimation':''}},false, true)\n\u003c/code\u003e\u003c/pre\u003e\u003ch5 id=\"查找\"\u003e查找\u003c/h5\u003e\n\u003cp\u003e列出集合信息：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.\u0026lt;collection-name\u0026gt;.find()\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e列出第一条集合的信息（按Json排版一下）：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.\u0026lt;collection-name\u0026gt;.findOne()\ndb.\u0026lt;col-name\u0026gt;.find({query}, {show})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003equery是一个查询字段。比如{\u0026quot;name\u0026quot;:\u0026quot;yicheng\u0026quot;}这种形式\n后面的参数决定field是否显示，比find({\u0026quot;name\u0026quot;:\u0026quot;yicheng\u0026quot;}, {\u0026quot;_id\u0026quot;: 0, \u0026quot;age\u0026quot;: 1}) 表示_id不会显示，age会显示\u003c/p\u003e\n\u003cp\u003e条件比较：\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003e操作\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003cth\u003e用法\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003e$gt\u003c/td\u003e\n\u003ctd\u003e\u0026gt;\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$gte\u003c/td\u003e\n\u003ctd\u003e\u0026gt;=\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$lt\u003c/td\u003e\n\u003ctd\u003e\u0026lt;\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$lte\u003c/td\u003e\n\u003ctd\u003e\u0026lt;=\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$eq\u003c/td\u003e\n\u003ctd\u003e=\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$ne\u003c/td\u003e\n\u003ctd\u003e!=\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$in\u003c/td\u003e\n\u003ctd\u003ein\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003e$nin\u003c/td\u003e\n\u003ctd\u003enot in\u003c/td\u003e\n\u003ctd\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003cstrong\u003e增删改\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e增加：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.col.insert(json)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003ee.g.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.col.insert({\u0026quot;name\u0026quot;:\u0026quot;engine\u0026quot;, \u0026quot;age\u0026quot;:18})\n\ndb.articles.insert({\u0026quot;title\u0026quot;:\u0026quot;Test\u0026quot;,\u0026quot;author\u0026quot;:\u0026quot;engine\u0026quot;,\u0026quot;time\u0026quot;:\u0026quot;2020.02.27\u0026quot;,\u0026quot;kind\u0026quot;:\u0026quot;tech\u0026quot;,\u0026quot;tags\u0026quot;:\u0026quot;golang,website\u0026quot;,\u0026quot;content\u0026quot;:\u0026quot;This is a blog for test\u0026quot;,\u0026quot;comment\u0026quot;:\u0026quot;comment1\u0026quot;,\u0026quot;view\u0026quot;:10,\u0026quot;like\u0026quot;:5})\n\ndb.user.insert({\u0026quot;name\u0026quot;:\u0026quot;user1\u0026quot;,avatar:\u0026quot;https://i.loli.net/2020/03/15/XsJjRomr1dy8u4D.png\u0026quot;,\u0026quot;type\u0026quot;:0,\u0026quot;score\u0026quot;:20,\u0026quot;password\u0026quot;:\u0026quot;123456\u0026quot;,\u0026quot;todo\u0026quot;:\u0026quot;\u0026quot;})\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e删除：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.col.remove(query)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.mycoll.update(query, object[, upsert_bool, multi_bool])\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e第一个参数是查询条件，第二个参数是修改信息，第三个是如果没找到是否相当于插入（默认为false），第四个参数是修改一个还是所有（默认为false）\u003c/p\u003e\n\u003cp\u003ee.g.\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.col.update({\u0026quot;name\u0026quot;:\u0026quot;engine\u0026quot;}, {$set:{\u0026quot;age\u0026quot;:20}})\n\ndb.col.update({\u0026quot;age\u0026quot;: {$gt: 20}}, {$set:{\u0026quot;age\u0026quot;: 30}}, false, true)\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e更复杂的逻辑：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edb.getCollection('participant').find().forEach(\n   function(item){\n       db.getCollection('participant').update({\u0026quot;_id\u0026quot;:item._id},{$set:{\u0026quot;modifyTimes\u0026quot;: 3}})\n   }\n)\n\u003c/code\u003e\u003c/pre\u003e\u003ctable class=\"reference\"\u003e\n\u003ctbody\u003e\u003ctr\u003e\n\u003cth\u003e数据类型\u003c/th\u003e\n\u003cth\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eString\u003c/td\u003e\u003ctd\u003e字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。   \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eInteger\u003c/td\u003e\u003ctd\u003e整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eBoolean\u003c/td\u003e\u003ctd\u003e布尔值。用于存储布尔值（真/假）。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eDouble\u003c/td\u003e\u003ctd\u003e双精度浮点值。用于存储浮点值。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eMin/Max keys\u003c/td\u003e\u003ctd\u003e将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eArray\u003c/td\u003e\u003ctd\u003e用于将数组或列表或多个值存储为一个键。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eTimestamp\u003c/td\u003e\u003ctd\u003e时间戳。记录文档修改或添加的具体时间。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eObject\u003c/td\u003e\u003ctd\u003e用于内嵌文档。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eNull\u003c/td\u003e\u003ctd\u003e用于创建空值。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eSymbol\u003c/td\u003e\u003ctd\u003e符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eDate\u003c/td\u003e\u003ctd\u003e日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eObject ID\u003c/td\u003e\u003ctd\u003e对象 ID。用于创建文档的 ID。  \u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eBinary Data\u003c/td\u003e\u003ctd\u003e二进制数据。用于存储二进制数据。\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eCode\u003c/td\u003e\u003ctd\u003e代码类型。用于在文档中存储 JavaScript 代码。\u003c/td\u003e\u003c/tr\u003e\n\u003ctr\u003e\u003ctd\u003eRegular expression\u003c/td\u003e\u003ctd\u003e正则表达式类型。用于存储正则表达式。\u003c/td\u003e\u003c/tr\u003e\n\u003c/tbody\u003e\u003c/table\u003e\n\u003cp\u003e更新某个字段的值\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edb.getCollection\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;participant\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e.find\u003cspan class=\"o\"\u003e()\u003c/span\u003e.forEach\u003cspan class=\"o\"\u003e(\u003c/span\u003e\n   \u003cspan class=\"k\"\u003efunction\u003c/span\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003eitem\u003cspan class=\"o\"\u003e){\u003c/span\u003e\n       db.getCollection\u003cspan class=\"o\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;participant\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e)\u003c/span\u003e.update\u003cspan class=\"o\"\u003e({\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;_id\u0026#34;\u003c/span\u003e:item._id\u003cspan class=\"o\"\u003e}\u003c/span\u003e,\u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"nv\"\u003e$set\u003c/span\u003e:\u003cspan class=\"o\"\u003e{\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;modifiTimes\u0026#34;\u003c/span\u003e: 2\u003cspan class=\"o\"\u003e}})\u003c/span\u003e\n   \u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"golang的mongodb接口mgo\"\u003eGolang的MongoDB接口：mgo\u003c/h4\u003e\n\u003cp\u003e简单的使用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan class=\"kd\"\u003etype\u003c/span\u003e \u003cspan class=\"nx\"\u003ePerson\u003c/span\u003e \u003cspan class=\"kd\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\u003cspan class=\"nx\"\u003eName\u003c/span\u003e  \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\t\u003cspan class=\"nx\"\u003ePhone\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"kd\"\u003efunc\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// mgo.Dial核心函数，由url新建一个session\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"nx\"\u003esession\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003emgo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;mongodb://127.0.0.1:27017/\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nb\"\u003epanic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003edefer\u003c/span\u003e \u003cspan class=\"nx\"\u003esession\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eClose\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\t\u003cspan class=\"c1\"\u003e// Optional. Switch the session to a monotonic behavior.\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"nx\"\u003esession\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eSetMode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emgo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eMonotonic\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// c就连到了对应的collection\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003esession\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eDB\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003eC\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;people\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// 插入数据\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eInsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Ale\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;+55 53 8116 9639\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\t\t\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Cla\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;+55 53 8402 8510\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFatal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e:=\u003c/span\u003e \u003cspan class=\"nx\"\u003ePerson\u003c/span\u003e\u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n        \u003cspan class=\"c1\"\u003e// result是一个查询结果\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\t\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebson\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eM\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Ale\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}).\u003c/span\u003e\u003cspan class=\"nf\"\u003eOne\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"nx\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"kc\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\t\t\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eFatal\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\t\u003cspan class=\"nx\"\u003efmt\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ePrintln\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Phone:\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ePhone\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","date":1587364154,"description":"","fuzzywordcount":2200,"kind":"page","lang":"zh","lastmod":1640265233,"objectID":"267df8ec8a2756f3cc5188929c44ba57","publishdate":1587364154,"relpermalink":"/posts/mongodb-basics/","section":"posts","summary":"背景 mongodb是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。它是一个介于关系数据库和非关系数据库之","tags":["MongoDB","Database"],"title":"Mongodb初级教程","url":"https://yichengme.site/posts/mongodb-basics/","wordcount":2188},{"categories":"posts","content":"\u003cp\u003eDjango项目写好了，最后一步就是部署(deployment)，部署十分关键，只有部署在服务器上，别人才能从互联网上通过ip地址或域名直接访问到你的网页。\u003c/p\u003e\n\u003cp\u003e第一步是购买vps（Virtual Private Server 虚拟服务器），这个很简单而且网上教程一大把，这里就不详述，我在vultr购买的海外服务器，这样不用浪费时间去备案了，vultr的一大特色就是按时长收费，如果你的vps出了什么问题，可以随时关停，并且它还支持微信支付宝，价格也很便宜。\n\u003ca href=\"https://www.vultr.com/?ref=7617179\"\u003e （vultr官网） \u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDjango的本地预览十分方便，一行\u003ccode\u003epython manage.py runserver\u003c/code\u003e就能搞定，但部署上线可没有这么简单。因为网上关于Django部署的教程都很杂乱，当时部署的时候就踩了很多很多坑，为了给之后一个参考，我又重新部署了一次，来记录详细的过程。\u003c/p\u003e\n\u003ch4 id=\"相关软件版本\"\u003e相关软件版本：\u003c/h4\u003e\n\u003cp\u003eDjango 2.1.3\nPython 3.6.6\nnginx 1.14.0\nuwsgi 2.0.17.1\u003c/p\u003e\n\u003cp\u003e服务器：\nUbuntu-server 18.04\u003c/p\u003e\n\u003ch4 id=\"准备工作\"\u003e准备工作\u003c/h4\u003e\n\u003cp\u003e首先打开ssh软件，Xshell、Putty什么的都行，通过vultr上vps详情页上给的ip和root密码连接到这台vps。\u003c/p\u003e\n\u003cp\u003e刚拿到的船新Linux，第一步先给它来个更新:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esudo apt-get update\nsudo apt-get upgrade\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e建议使用非root用户，部署时最好使用python虚拟环境，具体操作不是本文的重点，便不赘述了\u003c/p\u003e\n\u003cp\u003e系统自带Python3.6、vim和git，所以不用装\u003c/p\u003e\n\u003cp\u003e安装python3-pip、python3-setuptools、gcc、python3-dev、wheel：\n（缺一不可，不然之后用pip安装uwsgi会有各种各样的报错）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003esudo apt-get install python3-pip python-setuptools python3-dev wheel\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch4 id=\"放置django项目\"\u003e放置Django项目\u003c/h4\u003e\n\u003cp\u003e直接在服务器端用vim什么的写Django当然可取（虽然会很酸爽），但更多的时候我们是在本地写好了Django项目，要把它挪到服务器上。\u003c/p\u003e\n\u003cp\u003e在传输之前，要做一些工作：\u003c/p\u003e\n\u003cp\u003e先更改一下\u003ccode\u003esetting.py\u003c/code\u003e里的\u003ccode\u003eALLOWED_HOSTS\u003c/code\u003e，把服务器的ip加进去，有域名的话顺便把域名也加进去，要不然之后会无法加载Django项目\u003c/p\u003e\n\u003cp\u003e在本地的Python虚拟环境上使用\u003ccode\u003epip freeze \u0026gt; requirements.txt\u003c/code\u003e,生成一个txt文件，里面是需要的Python库以及其版本，之后一并传给服务器\u003c/p\u003e\n\u003cp\u003e传输文件到服务器的方法非常之多：可以使用Xshell自带的文件传输，也可以使用linux命令scp或安装更直观的lrzsz，或者使用本地的FileZilla、Winscp等软件，当然万能的git也很不错。\u003c/p\u003e\n\u003cp\u003e不过考虑到之后这个web项目之后也要修改，用上面的方法感觉都不是特别方便，介绍一个非常好用的方法，那就是使用Pycharm自带的deployment功能，可以实现实时上传以及下载文件，很是方便。\u003c/p\u003e\n\u003cp\u003e在\u003ccode\u003eTools\u003c/code\u003e-\u0026gt;\u003ccode\u003eDeployment\u003c/code\u003e-\u0026gt;\u003ccode\u003eConfiguration\u003c/code\u003e中配置好与自己服务器的连接，IP地址、用户名、密码以及对应项目路径\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1543389659/pycharm-deployment-1.jpg\" width=60%\u003e\n\u003c/center\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1543389659/pycharm-deployment-2.jpg\" width=60%\u003e\n\u003c/center\u003e\n\u003cp\u003e在\u003ccode\u003eSettings\u003c/code\u003e-\u0026gt;\u003ccode\u003eProject Interpreter\u003c/code\u003e里把项目解释器更改为服务器里的Python，mappings里填写两边项目的目录，再加一条\u003ccode\u003emanage.py\u003c/code\u003e的映射\u003c/p\u003e\n\u003ccenter\u003e\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1543389660/pycharm-deployment-3.jpg\" width=60%\u003e\n\u003c/center\u003e\n\u003cp\u003eapply之后Pycharm右下角会出现上传进度条，会有点慢，喝杯茶等一段时间即可\u003c/p\u003e\n\u003cp\u003e传输完毕后会发现本地的项目已经全部上传到服务器了\u003c/p\u003e\n\u003cp\u003e但这个毕竟不是这篇文章的重点，不重点介绍，遇到了什么问题可以留言或者私信我。\u003c/p\u003e\n\u003cp\u003e最后别忘了把\u003ccode\u003erequirements.txt\u003c/code\u003e上传到服务器，用pycharm的话只要直接把文件拖进本地项目目录，Pycharm就会自动帮我们上传到服务器。\u003c/p\u003e\n\u003cp\u003e在服务器上使用\u003ccode\u003epip install -r requirements.txt\u003c/code\u003e来安装必要的Python packages\n\u003cbr\u003e\u003c/p\u003e\n\u003ch4 id=\"安装与配置uwsgi\"\u003e安装与配置uwsgi\u003c/h4\u003e\n\u003cp\u003e使用pip3安装uwsgi（注意是pip安装，不是apt-get，否则之后会各种报错）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003epip3 install uwsgi\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e下面来试一下uwsgi是否好使：\n找个位置新建一个py文件，就叫\u003ccode\u003euwsgi_test.py\u003c/code\u003e好了，然后用vim打开\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003etouch uwsgi_test.py\nvim uwsgi_test.py\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e写入以下内容：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-Python\" data-lang=\"Python\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eapplication\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003estart_response\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estart_response\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;200 OK\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Content-Type\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;text/html\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)])\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sa\"\u003eb\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Hello Uwsgi\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003ewq保存退出（vim的基本操作不赘述，网上教程一大把）\u003c/p\u003e\n\u003cp\u003e然后输入以下命令启动uwsgi，把这个部署到某个端口，以9090端口为例\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003euwsgi --http :9090 --wsgi-file uwsgi_test.py\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这时会出现\u003ccode\u003espawned uWSGI worker 1 (and the only) (pid: 11812, cores: 1) \u003c/code\u003e\n找个浏览器，访问\u003ccode\u003ehttp://\u0026lt;你的服务器ip\u0026gt;:9090/\u003c/code\u003e，不出意外的话你会看到Hello Uwsgi的字样，说明uwsgi能正常运行。\u003c/p\u003e\n\u003cp\u003e在项目目录下新建\u003ccode\u003euwsgi.ini\u003c/code\u003e文件并编辑加入以下内容：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003euwsgi\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 直接访问uwsgi的端口号，绕过nginx\u003c/span\u003e\n\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e8010\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 转发给nginx的端口号\u003c/span\u003e\n\u003cspan class=\"n\"\u003esocket\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e127.0.0.1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e8001\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 是否使用主线程\u003c/span\u003e\n\u003cspan class=\"n\"\u003emaster\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 项目的绝对路径\u003c/span\u003e\n\u003cspan class=\"n\"\u003echdir\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ewww\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePROJECT_NAME\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;/\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# Django项目wsgi.py文件的相对路径\u003c/span\u003e\n\u003cspan class=\"n\"\u003ewsgi\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003efile\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003ePROJECT_NAME\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;/\u003c/span\u003e\u003cspan class=\"n\"\u003ewsgi\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epy\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 进程数\u003c/span\u003e\n\u003cspan class=\"n\"\u003eprocesses\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 每个进程的线程数\u003c/span\u003e\n\u003cspan class=\"n\"\u003ethreads\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 监听端口\u003c/span\u003e\n\u003cspan class=\"n\"\u003estats\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e127.0.0.1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e9191\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 每次退出时是否清理环境配置\u003c/span\u003e\n\u003cspan class=\"n\"\u003evacuum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 目录中一旦有文件被改动就自动重启\u003c/span\u003e\n\u003cspan class=\"n\"\u003etouch\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ereload\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ewww\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003emy_site\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# 存放日志\u003c/span\u003e\n\u003cspan class=\"n\"\u003edaemonize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003ewww\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003emy_site\u003c/span\u003e\u003cspan class=\"o\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003euWSGI\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003elog\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[uwsgi]\n# 直接访问uwsgi的端口号，绕过nginx\nhttp = :8010\n# 转发给nginx的端口号\nsocket = 127.0.0.1:8001\n# 是否使用主线程\nmaster = true\n# 项目的绝对路径\nchdir = /var/www/bangumi_project/\n# Django项目wsgi.py文件的相对路径\nwsgi-file = bangumi_project/wsgi.py\n# 进程数\nprocesses = 4\n# 每个进程的线程数\nthreads = 2\n# 监听端口\nstats = 127.0.0.1:9191\n# 每次退出时是否清理环境配置\nvacuum = true\n# 目录中一旦有文件被改动就自动重启\ntouch-reload = /var/www/bangumi_project\n# 存放日志\ndaemonize = /var/www/bangumi_project/uWSGI.log\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e加入uwsgi.ini的目的是使让uwsgi对接Django项目的启动变得更简便，否则就得在终端敲很长的代码\u003c/p\u003e\n\u003cp\u003e有了\u003ccode\u003euwsgi.ini\u003c/code\u003e我们只需要输入\u003ccode\u003euwsgi --ini uwsgi.ini\u003c/code\u003e就可以运行，浏览器输入ip地址加:8010端口（先绕过nginx因为还没配置呢），发现可以显示我们的项目了，这时css等静态文件可能没获取到，别急\u003c/p\u003e\n\u003ch4 id=\"安装和配置nginx\"\u003e安装和配置nginx\u003c/h4\u003e\n\u003cp\u003e先\u003ccode\u003esudo apt-get install nginx\u003c/code\u003e安装nginx，安装后nginx会自动启动，默认端口为80端口，浏览器输入ip地址加:80，可以看到\u0026quot;Welcome to nginx\u0026quot;的欢迎界面\u003c/p\u003e\n\u003cp\u003e把/etc/nginx/目录下的\u003ccode\u003euwsgi_params\u003c/code\u003e复制到项目目录下，也可以直接项目目录下新建\u003ccode\u003euwsgi_params\u003c/code\u003e文件，写入以下内容：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003euwsgi_param  QUERY_STRING       \u003cspan class=\"nv\"\u003e$query_string\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  REQUEST_METHOD     \u003cspan class=\"nv\"\u003e$request_method\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  CONTENT_TYPE       \u003cspan class=\"nv\"\u003e$content_type\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  CONTENT_LENGTH     \u003cspan class=\"nv\"\u003e$content_length\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\nuwsgi_param  REQUEST_URI        \u003cspan class=\"nv\"\u003e$request_uri\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  PATH_INFO          \u003cspan class=\"nv\"\u003e$document_uri\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  DOCUMENT_ROOT      \u003cspan class=\"nv\"\u003e$document_root\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  SERVER_PROTOCOL    \u003cspan class=\"nv\"\u003e$server_protocol\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  REQUEST_SCHEME     \u003cspan class=\"nv\"\u003e$scheme\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  HTTPS              \u003cspan class=\"nv\"\u003e$https\u003c/span\u003e if_not_empty\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\nuwsgi_param  REMOTE_ADDR        \u003cspan class=\"nv\"\u003e$remote_addr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  REMOTE_PORT        \u003cspan class=\"nv\"\u003e$remote_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  SERVER_PORT        \u003cspan class=\"nv\"\u003e$server_port\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\nuwsgi_param  SERVER_NAME        \u003cspan class=\"nv\"\u003e$server_name\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e前往/etc/nginx/目录，查看\u003ccode\u003enginx.conf\u003c/code\u003e（nginx基础配置），发现里面有这么两行，意思就是包含conf.d文件夹中所有以conf后缀的配置和site-enabled文件夹中的内容\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003einclude /etc/nginx/conf.d/*.conf;\ninclude /etc/nginx/sites-enabled/*;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我们不更改nginx.conf基础配置，只需要修改\u003ccode\u003econf.d\u003c/code\u003e目录下的conf文件即可，进入\u003ccode\u003econf.d\u003c/code\u003e文件夹，修改\u003ccode\u003edefault.conf\u003c/code\u003e文件，没有的话就新建一个（还可以修改site-enabled/default或者sites-available/default，效果都一样的）\u003c/p\u003e\n\u003cp\u003e然后写入以下内容：（务必根据自己的情况做相应更改）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e24\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e25\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e26\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e27\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e28\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e29\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-nginx\" data-lang=\"nginx\"\u003e\u003cspan class=\"k\"\u003eupstream\u003c/span\u003e \u003cspan class=\"s\"\u003edjango\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n   \u003cspan class=\"kn\"\u003eserver\u003c/span\u003e \u003cspan class=\"n\"\u003e127.0.0.1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e8001\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eserver\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# 监听端口，可改\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kn\"\u003elisten\u003c/span\u003e       \u003cspan class=\"mi\"\u003e80\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# 修改为你的ip或者域名\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kn\"\u003eserver_name\u003c/span\u003e  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"s\"\u003e.2.3.4\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# 编码方式\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kn\"\u003echarset\u003c/span\u003e \u003cspan class=\"s\"\u003eutf-8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# 日志记录，可选\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kn\"\u003eaccess_log\u003c/span\u003e      \u003cspan class=\"s\"\u003e/var/www/\u0026lt;PROJECT_NAME\u0026gt;/nginx_access.log\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kn\"\u003eerror_log\u003c/span\u003e       \u003cspan class=\"s\"\u003e/var/www/\u0026lt;PROJECT_NAME\u0026gt;/nginx_error.log\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e# 静态文件所在目录（自行修改）\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kn\"\u003elocation\u003c/span\u003e \u003cspan class=\"s\"\u003e/static\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kn\"\u003ealias\u003c/span\u003e \u003cspan class=\"s\"\u003e/var/www/my_site/blog/static\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# 媒体文件所在目录（自行修改）\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e#location /media  {\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e#    alias /home/www/djangotest/Hello/media; # 媒体文件所在文件夹\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"c1\"\u003e#}\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kn\"\u003elocation\u003c/span\u003e \u003cspan class=\"s\"\u003e/\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"kn\"\u003einclude\u003c/span\u003e \u003cspan class=\"s\"\u003e/var/www/\u0026lt;PROJECT_NAME\u0026gt;/uwsgi_params\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"kn\"\u003euwsgi_pass\u003c/span\u003e \u003cspan class=\"s\"\u003edjango\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e运行\u003ccode\u003eservice nginx restart\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e如果报错\u003ccode\u003enginx.service failed because the control process exited with error code\u003c/code\u003e，那么运行一下\u003ccode\u003enginx -t -c /etc/nginx/nginx.conf\u003c/code\u003e，可以很容易的找到问题在哪。\u003c/p\u003e\n\u003cp\u003e浏览器输入ip地址，如果发现看到的还是\u0026quot;Welcome to nginx\u0026quot;，这个是因为在\u003ccode\u003enginx.conf\u003c/code\u003e中还include了一个\u003ccode\u003esites-enabled/*\u003c/code\u003e，它覆盖了我们在\u003ccode\u003edefault.conf\u003c/code\u003e中的配置，可以干脆直接去\u003ccode\u003enginx.conf\u003c/code\u003e里把\u003ccode\u003einclude /etc/nginx/sites-enabled/*;\u003c/code\u003e这一行删掉，或者调换两行位置。\n如果当时直接修改的sites-available或者sites-enabled中的default，就不会有这个问题\u003c/p\u003e\n\u003cp\u003e这时再访问我们的ip，就能看到自己在本地搭建的Django项目了，因为在配置nginx的时候写入了static的路径，所以css什么的都加载进来了。\u003c/p\u003e\n\u003cp\u003e至此nginx配置完毕\u003c/p\u003e\n\u003ch4 id=\"后续工作\"\u003e后续工作\u003c/h4\u003e\n\u003cp\u003e服务器上的Django还没有执行数据库迁移与管理员创建，所以记得执行\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003epython manage.py makemigrations\npython manage.py migrate\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e以及\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003epython manage.py createsuperuser\n\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e每次有更新时都要重载uwsgi与nginx才能生效，为了方便uwsgi的重载，在项目目录下新建一个\u003ccode\u003euwsgi\u003c/code\u003e文件夹，然后在里面新建两个文件:\u003ccode\u003euwsgi.pid\u003c/code\u003e（用于重载停止等操作）和\u003ccode\u003euwsgi.status\u003c/code\u003e（用于查看状态）\u003c/p\u003e\n\u003cp\u003e修改\u003ccode\u003euwsgi.ini\u003c/code\u003e，把原先的stats那行删掉，下面加上这两行：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003estats=%(chdir)/uwsgi/uwsgi.status\npidfile=%(chdir)/uwsgi/uwsgi.pid\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e这样如果项目有更新，就可以使用这两个命令来分别重载uwsgi和nginx了\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003euwsgi --reload uwsgi/uwsgi.pid\nsystemctl reload nginx.service\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e至此我们的Django项目就部署完成了\u003c/p\u003e\n","date":1576947439,"description":"","fuzzywordcount":3700,"kind":"page","lang":"zh","lastmod":1640245678,"objectID":"82be9178df08613391ead81d6abd7a97","publishdate":1576947439,"relpermalink":"/posts/django2+nginx+uwsgi+ubuntu%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","section":"posts","summary":"Django项目写好了，最后一步就是部署(deployment)，部署十分关键，只有部署在服务器上，别人才能从互联网上通过ip地址或域名直接访问到你的网页。 第一","tags":["Django","Linux","nginx"],"title":"Django2+nginx+uwsgi+Ubuntu部署记录","url":"https://yichengme.site/posts/django2+nginx+uwsgi+ubuntu%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","wordcount":3603},{"categories":"posts","content":"\u003cp\u003e前年的时候，也就是17年年底，鉴于最低配的苏菲4性能比较羸弱，可怜的4G内存开个Chrome和Office就能吃满，分分钟卡爆，于是原来的电脑出掉了，准备更换一台高性能的电脑。\u003c/p\u003e\n\u003cp\u003e当时还在原专业读土木，某些软件只有Windows才有，上mbp显然是没想过的，另外宿舍用台式机也比较麻烦，所以只能选Windows笔记本。\u003c/p\u003e\n\u003cp\u003e预算其实并不是非常充足，但是内心有一种强烈的想法：买个配置够用的电脑多用几年。说实话五千块的电脑用三四年，真心不如一万的电脑用七八年。\u003c/p\u003e\n\u003cp\u003e卡顿是对时间的浪费，崩溃是对心血的亵渎。\u003c/p\u003e\n\u003cp\u003e一台电脑，配置固然是核心，但对我这种强迫症而言，工业设计也是一个重要因素。于是最后决定在XPS 15或者precision 5510中选择，它们的模具是一样的，主要区别在于其显卡和定位，前者是搭载游戏显卡，定位是超极本；后者搭载图形显卡，定位是移动图形工作站。\u003c/p\u003e\n\u003cp\u003e因为不玩大型游戏，所以最后选择了海淘一款官翻的precision 5510移动图形工作站，虽然买的价格不到国行新机的一半，但还是非常高。最后咬咬牙还是买了，事实证明这台precision 5510确实值这个价。\u003c/p\u003e\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1550418842/precision5510.jpg\" width=100%\u003e\n\u003ccenter\u003e *图片来源：Amazon.com*\u003c/center\u003e\n\u003cp\u003e主要部件如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eintel i7 6820HQ 处理器\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e16GB 镁光 DDR4  内存条\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSK hynix 512GB 固态硬盘\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e夏普 SHP1476 屏幕\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNvidia Quadro M1000M 图形显卡\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWindows10 pro 系统\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e使用这台工作站，跑了一年多Windows，总的体验当然是很用得很舒服，基本没出现过卡顿的情况，除了Ae渲染时风扇会狂转，其他时候完全无压力啊。win10本身尤其是UWP应用对4k触摸屏还是比较友好的（除了Windows的遗留win7风格界面），但是一些比较老旧或者小众的软件根本没有适配4k，导致那些软件要么字体非常小，看瞎了，要么强行靠缩放来保持尺寸，导致图标和字体发虚严重。4k在windows下的体验只能打80分。\u003c/p\u003e\n\u003cp\u003e最开始没想到要装黑苹果，只是偶然在B站看到了科技美学的XPS 15顶配黑苹果评测，瞬间被折服了:\n\u003ca href=\"https://www.bilibili.com/video/av6079016\"\u003e「科技美学」戴尔XPS15顶配版体验测评 黑苹果系统安装\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e当海舟用手开始在屏幕上拖视频块来做FCP剪辑时，弹幕已经沸腾了，就算是顶配定制版MacBook Pro也没有触摸屏，不管原因是为了与ipad的交互区分开，以免造成产品线混淆（正常人理解）还是考虑到抬手触屏不方便 触控板万岁！（果粉理解）亦或只是为了节约屏幕成本 赚更多的钱（果黑理解），事实还是：mbp就是没有配置触摸屏。\u003c/p\u003e\n\u003cp\u003e然而有趣的是，Mac OS系统和软件不仅支持高分辨率屏幕触摸操作，甚至比win10还支持的更好。\u003c/p\u003e\n\u003cp\u003e前几天通过针大的教程\u003ca href=\"https://hyejeong.cn/hackintosh5510mojave\"\u003eDell Precision 5510 Mojave Clover分享\u003c/a\u003e，花了两三天就比较顺利的装上了黑苹果，版本为Mojave 10.14.3，针大不仅写了很详细的教程和分享clover等文件，还通过私信解决了我的很多疑问，非常感激。如果有同样的precision5510想安装黑苹果的，可以去参考针大的这篇文章。\u003c/p\u003e\n\u003cp\u003e因为一些软件只能在win上运行，因此装的是双系统，512GB的SSD给Mac OS分了320GB，给win10留了剩下的一百来G。\u003c/p\u003e\n\u003cp\u003e下面对precision m5510 4k版黑苹果的各个方面做一个简单的小结，与mbp相比的优势与不足，以及黑苹果的完整程度：\u003c/p\u003e\n\u003ch4 id=\"屏幕\"\u003e屏幕\u003c/h4\u003e\n\u003cp\u003eMacBook Pro 15.4英寸的屏幕是 2880 x 1800 P3广色域 Retina视网膜屏\nPrecision5510 / XPS15 4k版的是 3840 x 2160 100%AdobeRGB UHD 康宁大猩猩玻璃触屏\u003c/p\u003e\n\u003cp\u003e单论屏幕素质，Retina的校色更准确，观感更舒适，而Dell的镜面屏分辨率更高，观感更鲜艳。这两款屏幕的素质在笔记本中绝对都在第一梯队，是设计人员的福音，两款屏幕属于神仙打架。\u003c/p\u003e\n\u003cp\u003e但有着触摸屏和Mac OS的加持，Precision 4k版本实现了mbp没有加入的触屏功能，感觉像是体验到了未来的mbp。\u003c/p\u003e\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1550418841/photo_2019-02-17_23.40.37.jpg\" width=100%\u003e\n\u003ch4 id=\"触控板\"\u003e触控板\u003c/h4\u003e\n\u003cp\u003embp的触控板有目共睹，触感和手势交互甩了普通PC一条街，precision/xps的触控板在win本中属于很优秀的，说实话触感虽然和mac是两种感觉，但也十分不错，可喜的是在黑苹果中precision/xps也各种手势操作能够有效执行，比如三指上下划、五指缩放等等，虽然还有一些距离但已经有些接近mbp了。但是前者触控板做工任然有一些瑕疵，看到很多反馈是有一部分比例的x/p本触控板出现轻微的下凹或上凸。\u003c/p\u003e\n\u003cp\u003eMac可以不需要鼠标，只用触控板做大部分工作，但是我尝试了一下搭载Mac OS的5510，还是不能完全脱离鼠标。\u003c/p\u003e\n\u003ch4 id=\"键盘\"\u003e键盘\u003c/h4\u003e\n\u003cp\u003eprecision/xps的键盘键程太短，说实话敲起来完全没有感觉，而且品控有的有些问题，我的两个Shift键都失灵了，扣下键帽也按不动就很难受，必须接着外接机械键盘，这样确实没问题而且敲得爽，但是外接键盘背来背去很不方便。\u003c/p\u003e\n\u003ch4 id=\"续航\"\u003e续航\u003c/h4\u003e\n\u003cp\u003e续航是4k版本的大短板，第一次使用这台电脑时，不插电两个小时后电脑就没电自动关机了，我的内心是绝望的。一方面是电池本身不足，另一方面是屏幕和显卡等（尤其是屏幕）耗电严重，我的这台5510就算开着屏幕什么软件也不运行，也就只能撑两个来小时；中大型软件开几个，80分钟内就能耗光全部电量。平常使用一直都得插着电，电脑要背走，充电器必须跟着，没有插座的地方完全不敢开机。\u003c/p\u003e\n\u003cp\u003e也许是我的这台情况过于严重了，其他的4k屏5510可能要好一些，不过也好不到太多，续航确实是硬伤。\u003c/p\u003e\n\u003ch4 id=\"相关驱动\"\u003e相关驱动\u003c/h4\u003e\n\u003cp\u003eintel的网卡无法驱动，需要去某宝单独购买，拆机后自动识别和正常苹果没区别。丽台M1000M图形显卡无法驱动，不过i7 6820hq的集显就够用了，只要不玩大游戏就好说，设计软件无压力。其他的驱动基本都可以正常运行。\u003c/p\u003e\n\u003ch3 id=\"总结\"\u003e总结\u003c/h3\u003e\n\u003cp\u003e总的说来，precision 5000系列/XPS 15可能是win阵营中，最适合安装黑苹果的机器之一，尤其是4k版本，触摸屏的加持更是更够体验到Mac OS别样的功能，4k下Mac的体验也比win10强太多了。\u003c/p\u003e\n\u003cp\u003e另外这个系列的模具工艺质量与工业设计很出色，也是PC本中少见的设计感与mbp有的一拼的产品。\u003c/p\u003e\n\u003cp\u003e以上便是我的Precision 5510安装黑苹果后的使用体验，若有任何疑问或错误请联系我，谢谢。\u003c/p\u003e\n\u003cimg src=\"https://res.cloudinary.com/dbmkzs2ez/image/upload/v1550418841/photo_2019-02-17_23.40.26.jpg\" width=100%\u003e\n\u003cp\u003e两天时间陆陆续续装了一些应用上去（未完待续），下一篇不鸽的话会写Mac的应用推荐与资源分享，不见不散\u003c/p\u003e\n","date":1567665187,"description":"","fuzzywordcount":2500,"kind":"page","lang":"zh","lastmod":1640249052,"objectID":"04f25bd7f7098ef8d8fa8d43f5198c8b","publishdate":1567665187,"relpermalink":"/posts/precision5510-hackintosh/","section":"posts","summary":"前年的时候，也就是17年年底，鉴于最低配的苏菲4性能比较羸弱，可怜的4G内存开个Chrome和Office就能吃满，分分钟卡爆，于是原来的电脑出掉了，准备更换一","tags":["黑苹果","折腾"],"title":"Precision5510 黑苹果使用体验","url":"https://yichengme.site/posts/precision5510-hackintosh/","wordcount":2463}]